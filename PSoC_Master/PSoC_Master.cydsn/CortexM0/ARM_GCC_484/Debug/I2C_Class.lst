ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"I2C_Class.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	irrigationStatus,1,1
  18              		.section	.text.initI2C,"ax",%progbits
  19              		.align	2
  20              		.global	initI2C
  21              		.code	16
  22              		.thumb_func
  23              		.type	initI2C, %function
  24              	initI2C:
  25              	.LFB33:
  26              		.file 1 ".\\I2C_Class.c"
   1:.\I2C_Class.c **** /* ========================================
   2:.\I2C_Class.c ****  * 
   3:.\I2C_Class.c ****  * AutoGreen - PSoC_Master
   4:.\I2C_Class.c ****  * I2C_Class.c
   5:.\I2C_Class.c ****  * (Description)
   6:.\I2C_Class.c ****  * PRJ3 - GRP9
   7:.\I2C_Class.c ****  * 2015-04-15
   8:.\I2C_Class.c ****  *
   9:.\I2C_Class.c ****  * ========================================
  10:.\I2C_Class.c **** */
  11:.\I2C_Class.c **** 
  12:.\I2C_Class.c **** // Include files
  13:.\I2C_Class.c **** #include "I2C_Class.h"
  14:.\I2C_Class.c **** 
  15:.\I2C_Class.c **** // Definitions
  16:.\I2C_Class.c **** #define TEMP_AND_HUM_SENSOR_ADDRESS 0x27
  17:.\I2C_Class.c **** #define ACTUATOR_ADRESS 0x42
  18:.\I2C_Class.c **** #define LIGHT_SENSOR_COMMAND_ADDRESS 0x00
  19:.\I2C_Class.c **** #define LIGHT_SENSOR_CONTROL_ADDRESS 0x01
  20:.\I2C_Class.c **** #define LIGHT_SENSOR_ADDRESS_LSB 0x04  
  21:.\I2C_Class.c **** #define LIGHT_SENSOR_ADDRESS_MSB 0x05
  22:.\I2C_Class.c **** 
  23:.\I2C_Class.c **** // Private data members
  24:.\I2C_Class.c **** uint8 irrigationStatus;
  25:.\I2C_Class.c **** 
  26:.\I2C_Class.c **** // Private prototypes
  27:.\I2C_Class.c **** 
  28:.\I2C_Class.c **** void initI2C(void){
  27              		.loc 1 28 0
  28              		.cfi_startproc
  29 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 2


  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              		.cfi_def_cfa_register 7
  29:.\I2C_Class.c ****     I2C_Start();                    // Starts I2C component
  35              		.loc 1 29 0
  36 0004 FFF7FEFF 		bl	I2C_Start
  30:.\I2C_Class.c ****     I2C_I2CMasterClearStatus();     // Clear status flags
  37              		.loc 1 30 0
  38 0008 FFF7FEFF 		bl	I2C_I2CMasterClearStatus
  31:.\I2C_Class.c ****     CyGlobalIntEnable;
  39              		.loc 1 31 0
  40              	@ 31 ".\I2C_Class.c" 1
  41 000c 62B6     		CPSIE   i
  42              	@ 0 "" 2
  32:.\I2C_Class.c **** }
  43              		.loc 1 32 0
  44              		.code	16
  45 000e BD46     		mov	sp, r7
  46              		@ sp needed
  47 0010 80BD     		pop	{r7, pc}
  48              		.cfi_endproc
  49              	.LFE33:
  50              		.size	initI2C, .-initI2C
  51 0012 C046     		.section	.text.adjustWindow,"ax",%progbits
  52              		.align	2
  53              		.global	adjustWindow
  54              		.code	16
  55              		.thumb_func
  56              		.type	adjustWindow, %function
  57              	adjustWindow:
  58              	.LFB34:
  33:.\I2C_Class.c **** 
  34:.\I2C_Class.c **** int8 adjustWindow(uint8 pos){
  59              		.loc 1 34 0
  60              		.cfi_startproc
  61 0000 80B5     		push	{r7, lr}
  62              		.cfi_def_cfa_offset 8
  63              		.cfi_offset 7, -8
  64              		.cfi_offset 14, -4
  65 0002 86B0     		sub	sp, sp, #24
  66              		.cfi_def_cfa_offset 32
  67 0004 00AF     		add	r7, sp, #0
  68              		.cfi_def_cfa_register 7
  69 0006 021C     		mov	r2, r0
  70 0008 FB1D     		add	r3, r7, #7
  71 000a 1A70     		strb	r2, [r3]
  35:.\I2C_Class.c ****     uint8 openWindow = 0xF;
  72              		.loc 1 35 0
  73 000c 3B1C     		mov	r3, r7
  74 000e 0F33     		add	r3, r3, #15
  75 0010 0F22     		mov	r2, #15
  76 0012 1A70     		strb	r2, [r3]
  36:.\I2C_Class.c ****     uint8 closeWindow = 0x0;
  77              		.loc 1 36 0
  78 0014 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 3


  79 0016 0E33     		add	r3, r3, #14
  80 0018 0022     		mov	r2, #0
  81 001a 1A70     		strb	r2, [r3]
  37:.\I2C_Class.c ****     uint8 result = 0;
  82              		.loc 1 37 0
  83 001c 3B1C     		mov	r3, r7
  84 001e 1733     		add	r3, r3, #23
  85 0020 0022     		mov	r2, #0
  86 0022 1A70     		strb	r2, [r3]
  38:.\I2C_Class.c ****     uint8 *tempWindow = 0;
  87              		.loc 1 38 0
  88 0024 0023     		mov	r3, #0
  89 0026 3B61     		str	r3, [r7, #16]
  39:.\I2C_Class.c ****         
  40:.\I2C_Class.c ****     if(pos == 0xF){
  90              		.loc 1 40 0
  91 0028 FB1D     		add	r3, r7, #7
  92 002a 1B78     		ldrb	r3, [r3]
  93 002c 0F2B     		cmp	r3, #15
  94 002e 0CD1     		bne	.L3
  41:.\I2C_Class.c ****         // Open window     -                write function  (adress,      dataToSend, NumberOfBytes
  42:.\I2C_Class.c ****         result = I2C_I2CMasterWriteBuf(ACTUATOR_ADRESS,&openWindow,1,I2C_I2C_MODE_COMPLETE_XFER);
  95              		.loc 1 42 0
  96 0030 3B1C     		mov	r3, r7
  97 0032 0F33     		add	r3, r3, #15
  98 0034 4220     		mov	r0, #66
  99 0036 191C     		mov	r1, r3
 100 0038 0122     		mov	r2, #1
 101 003a 0023     		mov	r3, #0
 102 003c FFF7FEFF 		bl	I2C_I2CMasterWriteBuf
 103 0040 021C     		mov	r2, r0
 104 0042 3B1C     		mov	r3, r7
 105 0044 1733     		add	r3, r3, #23
 106 0046 1A70     		strb	r2, [r3]
 107 0048 0FE0     		b	.L4
 108              	.L3:
  43:.\I2C_Class.c ****     }
  44:.\I2C_Class.c ****     else if(pos == 0x0){
 109              		.loc 1 44 0
 110 004a FB1D     		add	r3, r7, #7
 111 004c 1B78     		ldrb	r3, [r3]
 112 004e 002B     		cmp	r3, #0
 113 0050 0BD1     		bne	.L4
  45:.\I2C_Class.c ****         // Close window
  46:.\I2C_Class.c ****         result = I2C_I2CMasterWriteBuf(ACTUATOR_ADRESS,&closeWindow,1,I2C_I2C_MODE_COMPLETE_XFER); 
 114              		.loc 1 46 0
 115 0052 3B1C     		mov	r3, r7
 116 0054 0E33     		add	r3, r3, #14
 117 0056 4220     		mov	r0, #66
 118 0058 191C     		mov	r1, r3
 119 005a 0122     		mov	r2, #1
 120 005c 0023     		mov	r3, #0
 121 005e FFF7FEFF 		bl	I2C_I2CMasterWriteBuf
 122 0062 021C     		mov	r2, r0
 123 0064 3B1C     		mov	r3, r7
 124 0066 1733     		add	r3, r3, #23
 125 0068 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 4


 126              	.L4:
  47:.\I2C_Class.c ****     }
  48:.\I2C_Class.c ****     
  49:.\I2C_Class.c ****     getActuatorStatus(tempWindow, NULL, NULL, NULL);
 127              		.loc 1 49 0
 128 006a 3B69     		ldr	r3, [r7, #16]
 129 006c 181C     		mov	r0, r3
 130 006e 0021     		mov	r1, #0
 131 0070 0022     		mov	r2, #0
 132 0072 0023     		mov	r3, #0
 133 0074 FFF7FEFF 		bl	getActuatorStatus
  50:.\I2C_Class.c ****     
  51:.\I2C_Class.c ****     if (result == 0){
 134              		.loc 1 51 0
 135 0078 3B1C     		mov	r3, r7
 136 007a 1733     		add	r3, r3, #23
 137 007c 1B78     		ldrb	r3, [r3]
 138 007e 002B     		cmp	r3, #0
 139 0080 09D1     		bne	.L5
  52:.\I2C_Class.c ****     if (*tempWindow == pos){ 
 140              		.loc 1 52 0
 141 0082 3B69     		ldr	r3, [r7, #16]
 142 0084 1B78     		ldrb	r3, [r3]
 143 0086 FA1D     		add	r2, r7, #7
 144 0088 1278     		ldrb	r2, [r2]
 145 008a 9A42     		cmp	r2, r3
 146 008c 01D1     		bne	.L6
  53:.\I2C_Class.c ****         return 0;	
 147              		.loc 1 53 0
 148 008e 0023     		mov	r3, #0
 149 0090 02E0     		b	.L8
 150              	.L6:
  54:.\I2C_Class.c ****     }
  55:.\I2C_Class.c ****     else {
  56:.\I2C_Class.c ****         return -1;
 151              		.loc 1 56 0
 152 0092 FF23     		mov	r3, #255
 153 0094 00E0     		b	.L8
 154              	.L5:
  57:.\I2C_Class.c ****     }
  58:.\I2C_Class.c ****     }
  59:.\I2C_Class.c ****     else {
  60:.\I2C_Class.c ****         return -1;
 155              		.loc 1 60 0
 156 0096 FF23     		mov	r3, #255
 157              	.L8:
 158 0098 5BB2     		sxtb	r3, r3
  61:.\I2C_Class.c ****     }
  62:.\I2C_Class.c **** }
 159              		.loc 1 62 0
 160 009a 181C     		mov	r0, r3
 161 009c BD46     		mov	sp, r7
 162 009e 06B0     		add	sp, sp, #24
 163              		@ sp needed
 164 00a0 80BD     		pop	{r7, pc}
 165              		.cfi_endproc
 166              	.LFE34:
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 5


 167              		.size	adjustWindow, .-adjustWindow
 168 00a2 C046     		.section	.text.adjustHeat,"ax",%progbits
 169              		.align	2
 170              		.global	adjustHeat
 171              		.code	16
 172              		.thumb_func
 173              		.type	adjustHeat, %function
 174              	adjustHeat:
 175              	.LFB35:
  63:.\I2C_Class.c **** 
  64:.\I2C_Class.c **** int8 adjustHeat(uint8 heat){
 176              		.loc 1 64 0
 177              		.cfi_startproc
 178 0000 80B5     		push	{r7, lr}
 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 7, -8
 181              		.cfi_offset 14, -4
 182 0002 86B0     		sub	sp, sp, #24
 183              		.cfi_def_cfa_offset 32
 184 0004 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
 186 0006 021C     		mov	r2, r0
 187 0008 FB1D     		add	r3, r7, #7
 188 000a 1A70     		strb	r2, [r3]
  65:.\I2C_Class.c ****     uint8 turnHeatOn = 0b01000111;
 189              		.loc 1 65 0
 190 000c 3B1C     		mov	r3, r7
 191 000e 0F33     		add	r3, r3, #15
 192 0010 4722     		mov	r2, #71
 193 0012 1A70     		strb	r2, [r3]
  66:.\I2C_Class.c ****     uint8 turnHeatOff = 0b01000000;
 194              		.loc 1 66 0
 195 0014 3B1C     		mov	r3, r7
 196 0016 0E33     		add	r3, r3, #14
 197 0018 4022     		mov	r2, #64
 198 001a 1A70     		strb	r2, [r3]
  67:.\I2C_Class.c ****     uint8 result = 0;
 199              		.loc 1 67 0
 200 001c 3B1C     		mov	r3, r7
 201 001e 1733     		add	r3, r3, #23
 202 0020 0022     		mov	r2, #0
 203 0022 1A70     		strb	r2, [r3]
  68:.\I2C_Class.c ****     uint8 *tempHeat;
  69:.\I2C_Class.c ****     *tempHeat = 0;
 204              		.loc 1 69 0
 205 0024 3B69     		ldr	r3, [r7, #16]
 206 0026 0022     		mov	r2, #0
 207 0028 1A70     		strb	r2, [r3]
  70:.\I2C_Class.c ****     
  71:.\I2C_Class.c ****     if(heat == 0b111){
 208              		.loc 1 71 0
 209 002a FB1D     		add	r3, r7, #7
 210 002c 1B78     		ldrb	r3, [r3]
 211 002e 072B     		cmp	r3, #7
 212 0030 0CD1     		bne	.L10
  72:.\I2C_Class.c ****         // Turn on heat
  73:.\I2C_Class.c ****         result = I2C_I2CMasterWriteBuf(ACTUATOR_ADRESS,&turnHeatOn,1,I2C_I2C_MODE_COMPLETE_XFER);
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 6


 213              		.loc 1 73 0
 214 0032 3B1C     		mov	r3, r7
 215 0034 0F33     		add	r3, r3, #15
 216 0036 4220     		mov	r0, #66
 217 0038 191C     		mov	r1, r3
 218 003a 0122     		mov	r2, #1
 219 003c 0023     		mov	r3, #0
 220 003e FFF7FEFF 		bl	I2C_I2CMasterWriteBuf
 221 0042 021C     		mov	r2, r0
 222 0044 3B1C     		mov	r3, r7
 223 0046 1733     		add	r3, r3, #23
 224 0048 1A70     		strb	r2, [r3]
 225 004a 0FE0     		b	.L11
 226              	.L10:
  74:.\I2C_Class.c ****     }
  75:.\I2C_Class.c ****     else if(heat == 0b0){
 227              		.loc 1 75 0
 228 004c FB1D     		add	r3, r7, #7
 229 004e 1B78     		ldrb	r3, [r3]
 230 0050 002B     		cmp	r3, #0
 231 0052 0BD1     		bne	.L11
  76:.\I2C_Class.c ****         // Turn off heat
  77:.\I2C_Class.c ****         result = I2C_I2CMasterWriteBuf(ACTUATOR_ADRESS,&turnHeatOff,1,I2C_I2C_MODE_COMPLETE_XFER);
 232              		.loc 1 77 0
 233 0054 3B1C     		mov	r3, r7
 234 0056 0E33     		add	r3, r3, #14
 235 0058 4220     		mov	r0, #66
 236 005a 191C     		mov	r1, r3
 237 005c 0122     		mov	r2, #1
 238 005e 0023     		mov	r3, #0
 239 0060 FFF7FEFF 		bl	I2C_I2CMasterWriteBuf
 240 0064 021C     		mov	r2, r0
 241 0066 3B1C     		mov	r3, r7
 242 0068 1733     		add	r3, r3, #23
 243 006a 1A70     		strb	r2, [r3]
 244              	.L11:
  78:.\I2C_Class.c ****     }
  79:.\I2C_Class.c ****     
  80:.\I2C_Class.c ****     getActuatorStatus(NULL, tempHeat, NULL, NULL);
 245              		.loc 1 80 0
 246 006c 3B69     		ldr	r3, [r7, #16]
 247 006e 0020     		mov	r0, #0
 248 0070 191C     		mov	r1, r3
 249 0072 0022     		mov	r2, #0
 250 0074 0023     		mov	r3, #0
 251 0076 FFF7FEFF 		bl	getActuatorStatus
  81:.\I2C_Class.c ****     
  82:.\I2C_Class.c ****     if (*tempHeat == heat){
 252              		.loc 1 82 0
 253 007a 3B69     		ldr	r3, [r7, #16]
 254 007c 1B78     		ldrb	r3, [r3]
 255 007e FA1D     		add	r2, r7, #7
 256 0080 1278     		ldrb	r2, [r2]
 257 0082 9A42     		cmp	r2, r3
 258 0084 01D1     		bne	.L12
  83:.\I2C_Class.c ****         return 0;
 259              		.loc 1 83 0
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 7


 260 0086 0023     		mov	r3, #0
 261 0088 00E0     		b	.L14
 262              	.L12:
  84:.\I2C_Class.c ****     }
  85:.\I2C_Class.c ****     else {
  86:.\I2C_Class.c ****         return -1;   
 263              		.loc 1 86 0
 264 008a FF23     		mov	r3, #255
 265              	.L14:
 266 008c 5BB2     		sxtb	r3, r3
  87:.\I2C_Class.c ****     }
  88:.\I2C_Class.c **** }
 267              		.loc 1 88 0
 268 008e 181C     		mov	r0, r3
 269 0090 BD46     		mov	sp, r7
 270 0092 06B0     		add	sp, sp, #24
 271              		@ sp needed
 272 0094 80BD     		pop	{r7, pc}
 273              		.cfi_endproc
 274              	.LFE35:
 275              		.size	adjustHeat, .-adjustHeat
 276 0096 C046     		.section	.text.adjustVentilation,"ax",%progbits
 277              		.align	2
 278              		.global	adjustVentilation
 279              		.code	16
 280              		.thumb_func
 281              		.type	adjustVentilation, %function
 282              	adjustVentilation:
 283              	.LFB36:
  89:.\I2C_Class.c **** 
  90:.\I2C_Class.c **** int8 adjustVentilation(uint8 speed){
 284              		.loc 1 90 0
 285              		.cfi_startproc
 286 0000 80B5     		push	{r7, lr}
 287              		.cfi_def_cfa_offset 8
 288              		.cfi_offset 7, -8
 289              		.cfi_offset 14, -4
 290 0002 86B0     		sub	sp, sp, #24
 291              		.cfi_def_cfa_offset 32
 292 0004 00AF     		add	r7, sp, #0
 293              		.cfi_def_cfa_register 7
 294 0006 021C     		mov	r2, r0
 295 0008 FB1D     		add	r3, r7, #7
 296 000a 1A70     		strb	r2, [r3]
  91:.\I2C_Class.c ****     uint8 turnOnVent = 0b10000111;
 297              		.loc 1 91 0
 298 000c 3B1C     		mov	r3, r7
 299 000e 0F33     		add	r3, r3, #15
 300 0010 8722     		mov	r2, #135
 301 0012 1A70     		strb	r2, [r3]
  92:.\I2C_Class.c ****     uint8 turnOffVent = 0b10000000;
 302              		.loc 1 92 0
 303 0014 3B1C     		mov	r3, r7
 304 0016 0E33     		add	r3, r3, #14
 305 0018 8022     		mov	r2, #128
 306 001a 1A70     		strb	r2, [r3]
  93:.\I2C_Class.c ****     uint8 result = 0;
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 8


 307              		.loc 1 93 0
 308 001c 3B1C     		mov	r3, r7
 309 001e 1733     		add	r3, r3, #23
 310 0020 0022     		mov	r2, #0
 311 0022 1A70     		strb	r2, [r3]
  94:.\I2C_Class.c ****     uint8 *vent;
  95:.\I2C_Class.c ****     *vent = 0;
 312              		.loc 1 95 0
 313 0024 3B69     		ldr	r3, [r7, #16]
 314 0026 0022     		mov	r2, #0
 315 0028 1A70     		strb	r2, [r3]
  96:.\I2C_Class.c ****     
  97:.\I2C_Class.c ****     if(speed == 0b111){
 316              		.loc 1 97 0
 317 002a FB1D     		add	r3, r7, #7
 318 002c 1B78     		ldrb	r3, [r3]
 319 002e 072B     		cmp	r3, #7
 320 0030 0CD1     		bne	.L16
  98:.\I2C_Class.c ****         // Turn vent on
  99:.\I2C_Class.c ****         result = I2C_I2CMasterWriteBuf(ACTUATOR_ADRESS,&turnOnVent,1,I2C_I2C_MODE_COMPLETE_XFER);
 321              		.loc 1 99 0
 322 0032 3B1C     		mov	r3, r7
 323 0034 0F33     		add	r3, r3, #15
 324 0036 4220     		mov	r0, #66
 325 0038 191C     		mov	r1, r3
 326 003a 0122     		mov	r2, #1
 327 003c 0023     		mov	r3, #0
 328 003e FFF7FEFF 		bl	I2C_I2CMasterWriteBuf
 329 0042 021C     		mov	r2, r0
 330 0044 3B1C     		mov	r3, r7
 331 0046 1733     		add	r3, r3, #23
 332 0048 1A70     		strb	r2, [r3]
 333 004a 10E0     		b	.L17
 334              	.L16:
 100:.\I2C_Class.c ****     }
 101:.\I2C_Class.c ****     else if(speed == 0b0){
 335              		.loc 1 101 0
 336 004c FB1D     		add	r3, r7, #7
 337 004e 1B78     		ldrb	r3, [r3]
 338 0050 002B     		cmp	r3, #0
 339 0052 0CD1     		bne	.L17
 102:.\I2C_Class.c ****         // Turn vent off
 103:.\I2C_Class.c ****         result = I2C_I2CMasterWriteBuf(ACTUATOR_ADRESS,&turnOffVent,1,I2C_I2C_MODE_COMPLETE_XFER);
 340              		.loc 1 103 0
 341 0054 3B1C     		mov	r3, r7
 342 0056 0E33     		add	r3, r3, #14
 343 0058 4220     		mov	r0, #66
 344 005a 191C     		mov	r1, r3
 345 005c 0122     		mov	r2, #1
 346 005e 0023     		mov	r3, #0
 347 0060 FFF7FEFF 		bl	I2C_I2CMasterWriteBuf
 348 0064 021C     		mov	r2, r0
 349 0066 3B1C     		mov	r3, r7
 350 0068 1733     		add	r3, r3, #23
 351 006a 1A70     		strb	r2, [r3]
 104:.\I2C_Class.c ****     }
 105:.\I2C_Class.c ****     
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 9


 106:.\I2C_Class.c ****     while (I2C_I2CMasterStatus() == I2C_I2C_MSTAT_WR_CMPLT);
 352              		.loc 1 106 0
 353 006c FFE7     		b	.L22
 354              	.L17:
 355              	.L22:
 356 006e C046     		mov	r8, r8
 357              	.L18:
 358              		.loc 1 106 0 is_stmt 0 discriminator 1
 359 0070 FFF7FEFF 		bl	I2C_I2CMasterStatus
 360 0074 031C     		mov	r3, r0
 361 0076 022B     		cmp	r3, #2
 362 0078 FAD0     		beq	.L18
 107:.\I2C_Class.c ****     getActuatorStatus(NULL, NULL, vent, NULL);
 363              		.loc 1 107 0 is_stmt 1
 364 007a 3B69     		ldr	r3, [r7, #16]
 365 007c 0020     		mov	r0, #0
 366 007e 0021     		mov	r1, #0
 367 0080 1A1C     		mov	r2, r3
 368 0082 0023     		mov	r3, #0
 369 0084 FFF7FEFF 		bl	getActuatorStatus
 108:.\I2C_Class.c ****     
 109:.\I2C_Class.c ****     if (*vent == speed){
 370              		.loc 1 109 0
 371 0088 3B69     		ldr	r3, [r7, #16]
 372 008a 1B78     		ldrb	r3, [r3]
 373 008c FA1D     		add	r2, r7, #7
 374 008e 1278     		ldrb	r2, [r2]
 375 0090 9A42     		cmp	r2, r3
 376 0092 01D1     		bne	.L19
 110:.\I2C_Class.c ****             return 0;
 377              		.loc 1 110 0
 378 0094 0023     		mov	r3, #0
 379 0096 00E0     		b	.L21
 380              	.L19:
 111:.\I2C_Class.c ****         }
 112:.\I2C_Class.c ****     else {
 113:.\I2C_Class.c ****         return -1;       
 381              		.loc 1 113 0
 382 0098 FF23     		mov	r3, #255
 383              	.L21:
 384 009a 5BB2     		sxtb	r3, r3
 114:.\I2C_Class.c ****     }
 115:.\I2C_Class.c **** }
 385              		.loc 1 115 0
 386 009c 181C     		mov	r0, r3
 387 009e BD46     		mov	sp, r7
 388 00a0 06B0     		add	sp, sp, #24
 389              		@ sp needed
 390 00a2 80BD     		pop	{r7, pc}
 391              		.cfi_endproc
 392              	.LFE36:
 393              		.size	adjustVentilation, .-adjustVentilation
 394              		.section	.text.adjustIrrigation,"ax",%progbits
 395              		.align	2
 396              		.global	adjustIrrigation
 397              		.code	16
 398              		.thumb_func
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 10


 399              		.type	adjustIrrigation, %function
 400              	adjustIrrigation:
 401              	.LFB37:
 116:.\I2C_Class.c **** 
 117:.\I2C_Class.c **** int8 adjustIrrigation(uint8 index, uint8 onOff){
 402              		.loc 1 117 0
 403              		.cfi_startproc
 404 0000 80B5     		push	{r7, lr}
 405              		.cfi_def_cfa_offset 8
 406              		.cfi_offset 7, -8
 407              		.cfi_offset 14, -4
 408 0002 84B0     		sub	sp, sp, #16
 409              		.cfi_def_cfa_offset 24
 410 0004 00AF     		add	r7, sp, #0
 411              		.cfi_def_cfa_register 7
 412 0006 0A1C     		mov	r2, r1
 413 0008 FB1D     		add	r3, r7, #7
 414 000a 011C     		add	r1, r0, #0
 415 000c 1970     		strb	r1, [r3]
 416 000e BB1D     		add	r3, r7, #6
 417 0010 1A70     		strb	r2, [r3]
 118:.\I2C_Class.c ****     uint8 irriTransfer;
 119:.\I2C_Class.c ****     uint8 *irrigation;
 120:.\I2C_Class.c ****     *irrigation = 0;
 418              		.loc 1 120 0
 419 0012 FB68     		ldr	r3, [r7, #12]
 420 0014 0022     		mov	r2, #0
 421 0016 1A70     		strb	r2, [r3]
 121:.\I2C_Class.c ****     uint8 result = 0;
 422              		.loc 1 121 0
 423 0018 3B1C     		mov	r3, r7
 424 001a 0B33     		add	r3, r3, #11
 425 001c 0022     		mov	r2, #0
 426 001e 1A70     		strb	r2, [r3]
 122:.\I2C_Class.c **** 
 123:.\I2C_Class.c ****         /* In order for this code to function properly, the static int "irrigation" 
 124:.\I2C_Class.c ****         has to get updated each time this function is called. */
 125:.\I2C_Class.c ****     if (onOff == 1){    // Irrigation turn on
 427              		.loc 1 125 0
 428 0020 BB1D     		add	r3, r7, #6
 429 0022 1B78     		ldrb	r3, [r3]
 430 0024 012B     		cmp	r3, #1
 431 0026 19D1     		bne	.L24
 126:.\I2C_Class.c ****         irriTransfer = (irrigationStatus |= (1 << index));
 432              		.loc 1 126 0
 433 0028 FB1D     		add	r3, r7, #7
 434 002a 1B78     		ldrb	r3, [r3]
 435 002c 0122     		mov	r2, #1
 436 002e 111C     		mov	r1, r2
 437 0030 9940     		lsl	r1, r1, r3
 438 0032 0B1C     		mov	r3, r1
 439 0034 DAB2     		uxtb	r2, r3
 440 0036 2A4B     		ldr	r3, .L30
 441 0038 1B78     		ldrb	r3, [r3]
 442 003a DBB2     		uxtb	r3, r3
 443 003c 1343     		orr	r3, r2
 444 003e DBB2     		uxtb	r3, r3
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 11


 445 0040 DAB2     		uxtb	r2, r3
 446 0042 274B     		ldr	r3, .L30
 447 0044 1A70     		strb	r2, [r3]
 448 0046 264B     		ldr	r3, .L30
 449 0048 1A78     		ldrb	r2, [r3]
 450 004a 3B1C     		mov	r3, r7
 451 004c 0A33     		add	r3, r3, #10
 452 004e 1A70     		strb	r2, [r3]
 127:.\I2C_Class.c ****         irrigationStatus = irriTransfer;
 453              		.loc 1 127 0
 454 0050 3B1C     		mov	r3, r7
 455 0052 0A33     		add	r3, r3, #10
 456 0054 1A78     		ldrb	r2, [r3]
 457 0056 224B     		ldr	r3, .L30
 458 0058 1A70     		strb	r2, [r3]
 459 005a 21E0     		b	.L25
 460              	.L24:
 128:.\I2C_Class.c ****     }
 129:.\I2C_Class.c ****     else if (onOff == 0){   // Irrigation turn off
 461              		.loc 1 129 0
 462 005c BB1D     		add	r3, r7, #6
 463 005e 1B78     		ldrb	r3, [r3]
 464 0060 002B     		cmp	r3, #0
 465 0062 1BD1     		bne	.L26
 130:.\I2C_Class.c ****         irriTransfer = (irrigationStatus &= ~(1 << index));
 466              		.loc 1 130 0
 467 0064 FB1D     		add	r3, r7, #7
 468 0066 1B78     		ldrb	r3, [r3]
 469 0068 0122     		mov	r2, #1
 470 006a 111C     		mov	r1, r2
 471 006c 9940     		lsl	r1, r1, r3
 472 006e 0B1C     		mov	r3, r1
 473 0070 DBB2     		uxtb	r3, r3
 474 0072 DB43     		mvn	r3, r3
 475 0074 DBB2     		uxtb	r3, r3
 476 0076 1A4A     		ldr	r2, .L30
 477 0078 1278     		ldrb	r2, [r2]
 478 007a D2B2     		uxtb	r2, r2
 479 007c 1340     		and	r3, r2
 480 007e DBB2     		uxtb	r3, r3
 481 0080 DAB2     		uxtb	r2, r3
 482 0082 174B     		ldr	r3, .L30
 483 0084 1A70     		strb	r2, [r3]
 484 0086 164B     		ldr	r3, .L30
 485 0088 1A78     		ldrb	r2, [r3]
 486 008a 3B1C     		mov	r3, r7
 487 008c 0A33     		add	r3, r3, #10
 488 008e 1A70     		strb	r2, [r3]
 131:.\I2C_Class.c ****         irrigationStatus = irriTransfer;
 489              		.loc 1 131 0
 490 0090 3B1C     		mov	r3, r7
 491 0092 0A33     		add	r3, r3, #10
 492 0094 1A78     		ldrb	r2, [r3]
 493 0096 124B     		ldr	r3, .L30
 494 0098 1A70     		strb	r2, [r3]
 495 009a 01E0     		b	.L25
 496              	.L26:
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 12


 132:.\I2C_Class.c ****     }
 133:.\I2C_Class.c ****     else{
 134:.\I2C_Class.c ****     // Bad argument.
 135:.\I2C_Class.c ****     return -1;
 497              		.loc 1 135 0
 498 009c FF23     		mov	r3, #255
 499 009e 1AE0     		b	.L29
 500              	.L25:
 136:.\I2C_Class.c ****     }
 137:.\I2C_Class.c ****     
 138:.\I2C_Class.c ****     result = I2C_I2CMasterWriteBuf(ACTUATOR_ADRESS, &irriTransfer ,1,I2C_I2C_MODE_COMPLETE_XFER);
 501              		.loc 1 138 0
 502 00a0 3B1C     		mov	r3, r7
 503 00a2 0A33     		add	r3, r3, #10
 504 00a4 4220     		mov	r0, #66
 505 00a6 191C     		mov	r1, r3
 506 00a8 0122     		mov	r2, #1
 507 00aa 0023     		mov	r3, #0
 508 00ac FFF7FEFF 		bl	I2C_I2CMasterWriteBuf
 509 00b0 021C     		mov	r2, r0
 510 00b2 3B1C     		mov	r3, r7
 511 00b4 0B33     		add	r3, r3, #11
 512 00b6 1A70     		strb	r2, [r3]
 139:.\I2C_Class.c ****  
 140:.\I2C_Class.c ****     getActuatorStatus(NULL, NULL, NULL, irrigation);
 513              		.loc 1 140 0
 514 00b8 FB68     		ldr	r3, [r7, #12]
 515 00ba 0020     		mov	r0, #0
 516 00bc 0021     		mov	r1, #0
 517 00be 0022     		mov	r2, #0
 518 00c0 FFF7FEFF 		bl	getActuatorStatus
 141:.\I2C_Class.c ****     
 142:.\I2C_Class.c ****     if(*irrigation == irrigationStatus){
 519              		.loc 1 142 0
 520 00c4 FB68     		ldr	r3, [r7, #12]
 521 00c6 1A78     		ldrb	r2, [r3]
 522 00c8 054B     		ldr	r3, .L30
 523 00ca 1B78     		ldrb	r3, [r3]
 524 00cc 9A42     		cmp	r2, r3
 525 00ce 01D1     		bne	.L28
 143:.\I2C_Class.c ****         return 0;
 526              		.loc 1 143 0
 527 00d0 0023     		mov	r3, #0
 528 00d2 00E0     		b	.L29
 529              	.L28:
 144:.\I2C_Class.c ****     }
 145:.\I2C_Class.c ****     else {
 146:.\I2C_Class.c ****         return -1;
 530              		.loc 1 146 0
 531 00d4 FF23     		mov	r3, #255
 532              	.L29:
 533 00d6 5BB2     		sxtb	r3, r3
 147:.\I2C_Class.c ****     }
 148:.\I2C_Class.c **** }
 534              		.loc 1 148 0
 535 00d8 181C     		mov	r0, r3
 536 00da BD46     		mov	sp, r7
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 13


 537 00dc 04B0     		add	sp, sp, #16
 538              		@ sp needed
 539 00de 80BD     		pop	{r7, pc}
 540              	.L31:
 541              		.align	2
 542              	.L30:
 543 00e0 00000000 		.word	irrigationStatus
 544              		.cfi_endproc
 545              	.LFE37:
 546              		.size	adjustIrrigation, .-adjustIrrigation
 547              		.section	.text.getActuatorStatus,"ax",%progbits
 548              		.align	2
 549              		.global	getActuatorStatus
 550              		.code	16
 551              		.thumb_func
 552              		.type	getActuatorStatus, %function
 553              	getActuatorStatus:
 554              	.LFB38:
 149:.\I2C_Class.c **** 
 150:.\I2C_Class.c **** int8 getActuatorStatus(uint8* window, uint8* heat, uint8* vent, uint8* irrigation){
 555              		.loc 1 150 0
 556              		.cfi_startproc
 557 0000 80B5     		push	{r7, lr}
 558              		.cfi_def_cfa_offset 8
 559              		.cfi_offset 7, -8
 560              		.cfi_offset 14, -4
 561 0002 86B0     		sub	sp, sp, #24
 562              		.cfi_def_cfa_offset 32
 563 0004 00AF     		add	r7, sp, #0
 564              		.cfi_def_cfa_register 7
 565 0006 F860     		str	r0, [r7, #12]
 566 0008 B960     		str	r1, [r7, #8]
 567 000a 7A60     		str	r2, [r7, #4]
 568 000c 3B60     		str	r3, [r7]
 151:.\I2C_Class.c ****     uint8 dataget[2];
 152:.\I2C_Class.c ****     uint8 result = 0;
 569              		.loc 1 152 0
 570 000e 3B1C     		mov	r3, r7
 571 0010 1733     		add	r3, r3, #23
 572 0012 0022     		mov	r2, #0
 573 0014 1A70     		strb	r2, [r3]
 153:.\I2C_Class.c ****     
 154:.\I2C_Class.c ****     result = I2C_I2CMasterReadBuf(ACTUATOR_ADRESS, dataget, 2, I2C_I2C_MODE_COMPLETE_XFER);
 574              		.loc 1 154 0
 575 0016 3B1C     		mov	r3, r7
 576 0018 1433     		add	r3, r3, #20
 577 001a 4220     		mov	r0, #66
 578 001c 191C     		mov	r1, r3
 579 001e 0222     		mov	r2, #2
 580 0020 0023     		mov	r3, #0
 581 0022 FFF7FEFF 		bl	I2C_I2CMasterReadBuf
 582 0026 021C     		mov	r2, r0
 583 0028 3B1C     		mov	r3, r7
 584 002a 1733     		add	r3, r3, #23
 585 002c 1A70     		strb	r2, [r3]
 155:.\I2C_Class.c ****     
 156:.\I2C_Class.c ****     if (window)
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 14


 586              		.loc 1 156 0
 587 002e FB68     		ldr	r3, [r7, #12]
 588 0030 002B     		cmp	r3, #0
 589 0032 06D0     		beq	.L33
 157:.\I2C_Class.c ****     {                                   // Expecting to receive MSB first 
 158:.\I2C_Class.c ****        *window = (dataget[0] >> 3);      // Shifting out the 3 least significant bits.
 590              		.loc 1 158 0
 591 0034 3B1C     		mov	r3, r7
 592 0036 1433     		add	r3, r3, #20
 593 0038 1B78     		ldrb	r3, [r3]
 594 003a DB08     		lsr	r3, r3, #3
 595 003c DAB2     		uxtb	r2, r3
 596 003e FB68     		ldr	r3, [r7, #12]
 597 0040 1A70     		strb	r2, [r3]
 598              	.L33:
 159:.\I2C_Class.c ****     }
 160:.\I2C_Class.c ****     if (heat){              
 599              		.loc 1 160 0
 600 0042 BB68     		ldr	r3, [r7, #8]
 601 0044 002B     		cmp	r3, #0
 602 0046 09D0     		beq	.L34
 161:.\I2C_Class.c ****     *heat = ((dataget[0] & 0b00001110) >> 1);       // Ignoring everything but bit 1-3 and shifting
 603              		.loc 1 161 0
 604 0048 3B1C     		mov	r3, r7
 605 004a 1433     		add	r3, r3, #20
 606 004c 1B78     		ldrb	r3, [r3]
 607 004e 1A1C     		mov	r2, r3
 608 0050 0E23     		mov	r3, #14
 609 0052 1340     		and	r3, r2
 610 0054 5B10     		asr	r3, r3, #1
 611 0056 DAB2     		uxtb	r2, r3
 612 0058 BB68     		ldr	r3, [r7, #8]
 613 005a 1A70     		strb	r2, [r3]
 614              	.L34:
 162:.\I2C_Class.c ****     }
 163:.\I2C_Class.c ****     if (vent){
 615              		.loc 1 163 0
 616 005c 7B68     		ldr	r3, [r7, #4]
 617 005e 002B     		cmp	r3, #0
 618 0060 18D0     		beq	.L35
 164:.\I2C_Class.c ****         if ((dataget[0] & 0b00000001) == 0b00000001){   // Maybe we can find a smarter way to do th
 619              		.loc 1 164 0
 620 0062 3B1C     		mov	r3, r7
 621 0064 1433     		add	r3, r3, #20
 622 0066 1B78     		ldrb	r3, [r3]
 623 0068 1A1C     		mov	r2, r3
 624 006a 0123     		mov	r3, #1
 625 006c 1340     		and	r3, r2
 626 006e 0AD0     		beq	.L36
 165:.\I2C_Class.c ****             *vent = (dataget[1] >> 5) | 0b00000100;                                           // Th
 627              		.loc 1 165 0
 628 0070 3B1C     		mov	r3, r7
 629 0072 1433     		add	r3, r3, #20
 630 0074 5B78     		ldrb	r3, [r3, #1]
 631 0076 5B09     		lsr	r3, r3, #5
 632 0078 DBB2     		uxtb	r3, r3
 633 007a 0422     		mov	r2, #4
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 15


 634 007c 1343     		orr	r3, r2
 635 007e DAB2     		uxtb	r2, r3
 636 0080 7B68     		ldr	r3, [r7, #4]
 637 0082 1A70     		strb	r2, [r3]
 638 0084 06E0     		b	.L35
 639              	.L36:
 166:.\I2C_Class.c ****         }                                                    // Shifting 5 right so only 2 bits are
 167:.\I2C_Class.c ****         else {
 168:.\I2C_Class.c ****             *vent = (dataget[1] >> 5) | 0b00000000;         // shifting 5 right since only the to m
 640              		.loc 1 168 0
 641 0086 3B1C     		mov	r3, r7
 642 0088 1433     		add	r3, r3, #20
 643 008a 5B78     		ldrb	r3, [r3, #1]
 644 008c 5B09     		lsr	r3, r3, #5
 645 008e DAB2     		uxtb	r2, r3
 646 0090 7B68     		ldr	r3, [r7, #4]
 647 0092 1A70     		strb	r2, [r3]
 648              	.L35:
 169:.\I2C_Class.c ****         }
 170:.\I2C_Class.c ****     }
 171:.\I2C_Class.c ****     if (irrigation){
 649              		.loc 1 171 0
 650 0094 3B68     		ldr	r3, [r7]
 651 0096 002B     		cmp	r3, #0
 652 0098 07D0     		beq	.L37
 172:.\I2C_Class.c ****         *irrigation = (dataget[1] & 0b00111111);        // Ignoring two most significant bits.
 653              		.loc 1 172 0
 654 009a 3B1C     		mov	r3, r7
 655 009c 1433     		add	r3, r3, #20
 656 009e 5A78     		ldrb	r2, [r3, #1]
 657 00a0 3F23     		mov	r3, #63
 658 00a2 1340     		and	r3, r2
 659 00a4 DAB2     		uxtb	r2, r3
 660 00a6 3B68     		ldr	r3, [r7]
 661 00a8 1A70     		strb	r2, [r3]
 662              	.L37:
 173:.\I2C_Class.c ****     }   
 174:.\I2C_Class.c ****     if (result == I2C_I2C_MSTR_NO_ERROR){
 663              		.loc 1 174 0
 664 00aa 3B1C     		mov	r3, r7
 665 00ac 1733     		add	r3, r3, #23
 666 00ae 1B78     		ldrb	r3, [r3]
 667 00b0 002B     		cmp	r3, #0
 668 00b2 01D1     		bne	.L38
 175:.\I2C_Class.c ****         return 0;
 669              		.loc 1 175 0
 670 00b4 0023     		mov	r3, #0
 671 00b6 00E0     		b	.L40
 672              	.L38:
 176:.\I2C_Class.c ****     }
 177:.\I2C_Class.c ****     else {
 178:.\I2C_Class.c ****         return -1;   
 673              		.loc 1 178 0
 674 00b8 FF23     		mov	r3, #255
 675              	.L40:
 676 00ba 5BB2     		sxtb	r3, r3
 179:.\I2C_Class.c ****     }
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 16


 180:.\I2C_Class.c **** }
 677              		.loc 1 180 0
 678 00bc 181C     		mov	r0, r3
 679 00be BD46     		mov	sp, r7
 680 00c0 06B0     		add	sp, sp, #24
 681              		@ sp needed
 682 00c2 80BD     		pop	{r7, pc}
 683              		.cfi_endproc
 684              	.LFE38:
 685              		.size	getActuatorStatus, .-getActuatorStatus
 686              		.section	.text.getTempAndHum,"ax",%progbits
 687              		.align	2
 688              		.global	getTempAndHum
 689              		.code	16
 690              		.thumb_func
 691              		.type	getTempAndHum, %function
 692              	getTempAndHum:
 693              	.LFB39:
 181:.\I2C_Class.c **** 
 182:.\I2C_Class.c **** int8 getTempAndHum(int32* temp, int32* hum){
 694              		.loc 1 182 0
 695              		.cfi_startproc
 696 0000 80B5     		push	{r7, lr}
 697              		.cfi_def_cfa_offset 8
 698              		.cfi_offset 7, -8
 699              		.cfi_offset 14, -4
 700 0002 84B0     		sub	sp, sp, #16
 701              		.cfi_def_cfa_offset 24
 702 0004 00AF     		add	r7, sp, #0
 703              		.cfi_def_cfa_register 7
 704 0006 7860     		str	r0, [r7, #4]
 705 0008 3960     		str	r1, [r7]
 183:.\I2C_Class.c ****     uint8 dataget[4];
 184:.\I2C_Class.c ****     uint8 result = 0;
 706              		.loc 1 184 0
 707 000a 3B1C     		mov	r3, r7
 708 000c 0F33     		add	r3, r3, #15
 709 000e 0022     		mov	r2, #0
 710 0010 1A70     		strb	r2, [r3]
 185:.\I2C_Class.c ****     
 186:.\I2C_Class.c ****     result = I2C_I2CMasterReadBuf(TEMP_AND_HUM_SENSOR_ADDRESS, dataget, 4, I2C_I2C_MODE_COMPLETE_XF
 711              		.loc 1 186 0
 712 0012 3B1C     		mov	r3, r7
 713 0014 0833     		add	r3, r3, #8
 714 0016 2720     		mov	r0, #39
 715 0018 191C     		mov	r1, r3
 716 001a 0422     		mov	r2, #4
 717 001c 0023     		mov	r3, #0
 718 001e FFF7FEFF 		bl	I2C_I2CMasterReadBuf
 719 0022 021C     		mov	r2, r0
 720 0024 3B1C     		mov	r3, r7
 721 0026 0F33     		add	r3, r3, #15
 722 0028 1A70     		strb	r2, [r3]
 187:.\I2C_Class.c ****         // Expecting to receive MSB first.
 188:.\I2C_Class.c ****     *temp = ((dataget[0] << 7) | dataget[1]);   
 723              		.loc 1 188 0
 724 002a 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 17


 725 002c 0833     		add	r3, r3, #8
 726 002e 1B78     		ldrb	r3, [r3]
 727 0030 DA01     		lsl	r2, r3, #7
 728 0032 3B1C     		mov	r3, r7
 729 0034 0833     		add	r3, r3, #8
 730 0036 5B78     		ldrb	r3, [r3, #1]
 731 0038 1A43     		orr	r2, r3
 732 003a 7B68     		ldr	r3, [r7, #4]
 733 003c 1A60     		str	r2, [r3]
 189:.\I2C_Class.c ****     *hum = ((dataget[2] << 7) | dataget[3]);
 734              		.loc 1 189 0
 735 003e 3B1C     		mov	r3, r7
 736 0040 0833     		add	r3, r3, #8
 737 0042 9B78     		ldrb	r3, [r3, #2]
 738 0044 DA01     		lsl	r2, r3, #7
 739 0046 3B1C     		mov	r3, r7
 740 0048 0833     		add	r3, r3, #8
 741 004a DB78     		ldrb	r3, [r3, #3]
 742 004c 1A43     		orr	r2, r3
 743 004e 3B68     		ldr	r3, [r7]
 744 0050 1A60     		str	r2, [r3]
 190:.\I2C_Class.c ****     
 191:.\I2C_Class.c ****     if (result == I2C_I2C_MSTR_NO_ERROR){
 745              		.loc 1 191 0
 746 0052 3B1C     		mov	r3, r7
 747 0054 0F33     		add	r3, r3, #15
 748 0056 1B78     		ldrb	r3, [r3]
 749 0058 002B     		cmp	r3, #0
 750 005a 01D1     		bne	.L42
 192:.\I2C_Class.c ****         return 0;   // No error 
 751              		.loc 1 192 0
 752 005c 0023     		mov	r3, #0
 753 005e 00E0     		b	.L44
 754              	.L42:
 193:.\I2C_Class.c ****     }
 194:.\I2C_Class.c ****     else {
 195:.\I2C_Class.c ****         return -1;
 755              		.loc 1 195 0
 756 0060 FF23     		mov	r3, #255
 757              	.L44:
 758 0062 5BB2     		sxtb	r3, r3
 196:.\I2C_Class.c ****     }
 197:.\I2C_Class.c **** }
 759              		.loc 1 197 0
 760 0064 181C     		mov	r0, r3
 761 0066 BD46     		mov	sp, r7
 762 0068 04B0     		add	sp, sp, #16
 763              		@ sp needed
 764 006a 80BD     		pop	{r7, pc}
 765              		.cfi_endproc
 766              	.LFE39:
 767              		.size	getTempAndHum, .-getTempAndHum
 768              		.section	.text.getLight,"ax",%progbits
 769              		.align	2
 770              		.global	getLight
 771              		.code	16
 772              		.thumb_func
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 18


 773              		.type	getLight, %function
 774              	getLight:
 775              	.LFB40:
 198:.\I2C_Class.c **** 
 199:.\I2C_Class.c **** int8 getLight(int32* light){
 776              		.loc 1 199 0
 777              		.cfi_startproc
 778 0000 80B5     		push	{r7, lr}
 779              		.cfi_def_cfa_offset 8
 780              		.cfi_offset 7, -8
 781              		.cfi_offset 14, -4
 782 0002 84B0     		sub	sp, sp, #16
 783              		.cfi_def_cfa_offset 24
 784 0004 00AF     		add	r7, sp, #0
 785              		.cfi_def_cfa_register 7
 786 0006 7860     		str	r0, [r7, #4]
 200:.\I2C_Class.c ****     uint8 dataget[2];
 201:.\I2C_Class.c ****     uint8 result = 0;
 787              		.loc 1 201 0
 788 0008 3B1C     		mov	r3, r7
 789 000a 0F33     		add	r3, r3, #15
 790 000c 0022     		mov	r2, #0
 791 000e 1A70     		strb	r2, [r3]
 202:.\I2C_Class.c ****     
 203:.\I2C_Class.c ****     result = I2C_I2CMasterReadBuf(LIGHT_SENSOR_ADDRESS_MSB, (uint8*) dataget, 2, I2C_I2C_MODE_COMPL
 792              		.loc 1 203 0
 793 0010 3B1C     		mov	r3, r7
 794 0012 0C33     		add	r3, r3, #12
 795 0014 0520     		mov	r0, #5
 796 0016 191C     		mov	r1, r3
 797 0018 0222     		mov	r2, #2
 798 001a 0023     		mov	r3, #0
 799 001c FFF7FEFF 		bl	I2C_I2CMasterReadBuf
 800 0020 021C     		mov	r2, r0
 801 0022 3B1C     		mov	r3, r7
 802 0024 0F33     		add	r3, r3, #15
 803 0026 1A70     		strb	r2, [r3]
 204:.\I2C_Class.c ****         // Expecting to receive MSB first.
 205:.\I2C_Class.c ****         *light = (dataget[0] << 7);     // TODO: TEST THIS WITH THE PROPER SENSOR!!
 804              		.loc 1 205 0
 805 0028 3B1C     		mov	r3, r7
 806 002a 0C33     		add	r3, r3, #12
 807 002c 1B78     		ldrb	r3, [r3]
 808 002e DA01     		lsl	r2, r3, #7
 809 0030 7B68     		ldr	r3, [r7, #4]
 810 0032 1A60     		str	r2, [r3]
 206:.\I2C_Class.c ****         *light = *light | dataget[1];   
 811              		.loc 1 206 0
 812 0034 7B68     		ldr	r3, [r7, #4]
 813 0036 1A68     		ldr	r2, [r3]
 814 0038 3B1C     		mov	r3, r7
 815 003a 0C33     		add	r3, r3, #12
 816 003c 5B78     		ldrb	r3, [r3, #1]
 817 003e 1A43     		orr	r2, r3
 818 0040 7B68     		ldr	r3, [r7, #4]
 819 0042 1A60     		str	r2, [r3]
 207:.\I2C_Class.c ****         
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 19


 208:.\I2C_Class.c ****     if (result == I2C_I2C_MSTR_NO_ERROR){
 820              		.loc 1 208 0
 821 0044 3B1C     		mov	r3, r7
 822 0046 0F33     		add	r3, r3, #15
 823 0048 1B78     		ldrb	r3, [r3]
 824 004a 002B     		cmp	r3, #0
 825 004c 01D1     		bne	.L46
 209:.\I2C_Class.c ****         return 0;   // No error 
 826              		.loc 1 209 0
 827 004e 0023     		mov	r3, #0
 828 0050 00E0     		b	.L48
 829              	.L46:
 210:.\I2C_Class.c **** 	}
 211:.\I2C_Class.c ****     else {
 212:.\I2C_Class.c ****         return -1;
 830              		.loc 1 212 0
 831 0052 FF23     		mov	r3, #255
 832              	.L48:
 833 0054 5BB2     		sxtb	r3, r3
 213:.\I2C_Class.c ****     }
 214:.\I2C_Class.c **** }
 834              		.loc 1 214 0
 835 0056 181C     		mov	r0, r3
 836 0058 BD46     		mov	sp, r7
 837 005a 04B0     		add	sp, sp, #16
 838              		@ sp needed
 839 005c 80BD     		pop	{r7, pc}
 840              		.cfi_endproc
 841              	.LFE40:
 842              		.size	getLight, .-getLight
 843 005e C046     		.section	.text.getSoilHum,"ax",%progbits
 844              		.align	2
 845              		.global	getSoilHum
 846              		.code	16
 847              		.thumb_func
 848              		.type	getSoilHum, %function
 849              	getSoilHum:
 850              	.LFB41:
 215:.\I2C_Class.c **** 
 216:.\I2C_Class.c **** int8 getSoilHum(uint8 index, int16* soilHum){   // TODO: THIS HAS NOT BEEN IMPLEMENTED.
 851              		.loc 1 216 0
 852              		.cfi_startproc
 853 0000 80B5     		push	{r7, lr}
 854              		.cfi_def_cfa_offset 8
 855              		.cfi_offset 7, -8
 856              		.cfi_offset 14, -4
 857 0002 84B0     		sub	sp, sp, #16
 858              		.cfi_def_cfa_offset 24
 859 0004 00AF     		add	r7, sp, #0
 860              		.cfi_def_cfa_register 7
 861 0006 021C     		mov	r2, r0
 862 0008 3960     		str	r1, [r7]
 863 000a FB1D     		add	r3, r7, #7
 864 000c 1A70     		strb	r2, [r3]
 217:.\I2C_Class.c ****     index = 0;
 865              		.loc 1 217 0
 866 000e 3B1C     		mov	r3, r7
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 20


 867 0010 0F33     		add	r3, r3, #15
 868 0012 0022     		mov	r2, #0
 869 0014 1A70     		strb	r2, [r3]
 218:.\I2C_Class.c ****     *soilHum = 0;
 870              		.loc 1 218 0
 871 0016 3B68     		ldr	r3, [r7]
 872 0018 0022     		mov	r2, #0
 873 001a 1A80     		strh	r2, [r3]
 219:.\I2C_Class.c ****     return 0;
 874              		.loc 1 219 0
 875 001c 0023     		mov	r3, #0
 876 001e 5BB2     		sxtb	r3, r3
 220:.\I2C_Class.c **** }
 877              		.loc 1 220 0
 878 0020 181C     		mov	r0, r3
 879 0022 BD46     		mov	sp, r7
 880 0024 04B0     		add	sp, sp, #16
 881              		@ sp needed
 882 0026 80BD     		pop	{r7, pc}
 883              		.cfi_endproc
 884              	.LFE41:
 885              		.size	getSoilHum, .-getSoilHum
 886              		.text
 887              	.Letext0:
 888              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 889              		.section	.debug_info,"",%progbits
 890              	.Ldebug_info0:
 891 0000 C9030000 		.4byte	0x3c9
 892 0004 0400     		.2byte	0x4
 893 0006 00000000 		.4byte	.Ldebug_abbrev0
 894 000a 04       		.byte	0x4
 895 000b 01       		.uleb128 0x1
 896 000c A3000000 		.4byte	.LASF47
 897 0010 01       		.byte	0x1
 898 0011 76000000 		.4byte	.LASF48
 899 0015 1F000000 		.4byte	.LASF49
 900 0019 00000000 		.4byte	.Ldebug_ranges0+0
 901 001d 00000000 		.4byte	0
 902 0021 00000000 		.4byte	.Ldebug_line0
 903 0025 02       		.uleb128 0x2
 904 0026 01       		.byte	0x1
 905 0027 06       		.byte	0x6
 906 0028 8D010000 		.4byte	.LASF0
 907 002c 02       		.uleb128 0x2
 908 002d 01       		.byte	0x1
 909 002e 08       		.byte	0x8
 910 002f 1F010000 		.4byte	.LASF1
 911 0033 02       		.uleb128 0x2
 912 0034 02       		.byte	0x2
 913 0035 05       		.byte	0x5
 914 0036 72020000 		.4byte	.LASF2
 915 003a 02       		.uleb128 0x2
 916 003b 02       		.byte	0x2
 917 003c 07       		.byte	0x7
 918 003d 84000000 		.4byte	.LASF3
 919 0041 02       		.uleb128 0x2
 920 0042 04       		.byte	0x4
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 21


 921 0043 05       		.byte	0x5
 922 0044 8F020000 		.4byte	.LASF4
 923 0048 02       		.uleb128 0x2
 924 0049 04       		.byte	0x4
 925 004a 07       		.byte	0x7
 926 004b 55010000 		.4byte	.LASF5
 927 004f 02       		.uleb128 0x2
 928 0050 08       		.byte	0x8
 929 0051 05       		.byte	0x5
 930 0052 4E020000 		.4byte	.LASF6
 931 0056 02       		.uleb128 0x2
 932 0057 08       		.byte	0x8
 933 0058 07       		.byte	0x7
 934 0059 F5010000 		.4byte	.LASF7
 935 005d 03       		.uleb128 0x3
 936 005e 04       		.byte	0x4
 937 005f 05       		.byte	0x5
 938 0060 696E7400 		.ascii	"int\000"
 939 0064 02       		.uleb128 0x2
 940 0065 04       		.byte	0x4
 941 0066 07       		.byte	0x7
 942 0067 D1010000 		.4byte	.LASF8
 943 006b 04       		.uleb128 0x4
 944 006c 97000000 		.4byte	.LASF9
 945 0070 02       		.byte	0x2
 946 0071 A1       		.byte	0xa1
 947 0072 2C000000 		.4byte	0x2c
 948 0076 04       		.uleb128 0x4
 949 0077 C5010000 		.4byte	.LASF10
 950 007b 02       		.byte	0x2
 951 007c A2       		.byte	0xa2
 952 007d 3A000000 		.4byte	0x3a
 953 0081 04       		.uleb128 0x4
 954 0082 CC010000 		.4byte	.LASF11
 955 0086 02       		.byte	0x2
 956 0087 A4       		.byte	0xa4
 957 0088 25000000 		.4byte	0x25
 958 008c 04       		.uleb128 0x4
 959 008d 4F010000 		.4byte	.LASF12
 960 0091 02       		.byte	0x2
 961 0092 A5       		.byte	0xa5
 962 0093 33000000 		.4byte	0x33
 963 0097 04       		.uleb128 0x4
 964 0098 79010000 		.4byte	.LASF13
 965 009c 02       		.byte	0x2
 966 009d A6       		.byte	0xa6
 967 009e 41000000 		.4byte	0x41
 968 00a2 02       		.uleb128 0x2
 969 00a3 04       		.byte	0x4
 970 00a4 04       		.byte	0x4
 971 00a5 9D000000 		.4byte	.LASF14
 972 00a9 02       		.uleb128 0x2
 973 00aa 08       		.byte	0x8
 974 00ab 04       		.byte	0x4
 975 00ac A1010000 		.4byte	.LASF15
 976 00b0 02       		.uleb128 0x2
 977 00b1 01       		.byte	0x1
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 22


 978 00b2 08       		.byte	0x8
 979 00b3 5C020000 		.4byte	.LASF16
 980 00b7 02       		.uleb128 0x2
 981 00b8 04       		.byte	0x4
 982 00b9 07       		.byte	0x7
 983 00ba 3A020000 		.4byte	.LASF17
 984 00be 05       		.uleb128 0x5
 985 00bf 04       		.byte	0x4
 986 00c0 6B000000 		.4byte	0x6b
 987 00c4 06       		.uleb128 0x6
 988 00c5 2C020000 		.4byte	.LASF50
 989 00c9 01       		.byte	0x1
 990 00ca 1C       		.byte	0x1c
 991 00cb 00000000 		.4byte	.LFB33
 992 00cf 12000000 		.4byte	.LFE33-.LFB33
 993 00d3 01       		.uleb128 0x1
 994 00d4 9C       		.byte	0x9c
 995 00d5 07       		.uleb128 0x7
 996 00d6 12000000 		.4byte	.LASF22
 997 00da 01       		.byte	0x1
 998 00db 22       		.byte	0x22
 999 00dc 81000000 		.4byte	0x81
 1000 00e0 00000000 		.4byte	.LFB34
 1001 00e4 A2000000 		.4byte	.LFE34-.LFB34
 1002 00e8 01       		.uleb128 0x1
 1003 00e9 9C       		.byte	0x9c
 1004 00ea 35010000 		.4byte	0x135
 1005 00ee 08       		.uleb128 0x8
 1006 00ef 706F7300 		.ascii	"pos\000"
 1007 00f3 01       		.byte	0x1
 1008 00f4 22       		.byte	0x22
 1009 00f5 6B000000 		.4byte	0x6b
 1010 00f9 02       		.uleb128 0x2
 1011 00fa 91       		.byte	0x91
 1012 00fb 67       		.sleb128 -25
 1013 00fc 09       		.uleb128 0x9
 1014 00fd 21020000 		.4byte	.LASF18
 1015 0101 01       		.byte	0x1
 1016 0102 23       		.byte	0x23
 1017 0103 6B000000 		.4byte	0x6b
 1018 0107 02       		.uleb128 0x2
 1019 0108 91       		.byte	0x91
 1020 0109 6F       		.sleb128 -17
 1021 010a 09       		.uleb128 0x9
 1022 010b B9010000 		.4byte	.LASF19
 1023 010f 01       		.byte	0x1
 1024 0110 24       		.byte	0x24
 1025 0111 6B000000 		.4byte	0x6b
 1026 0115 02       		.uleb128 0x2
 1027 0116 91       		.byte	0x91
 1028 0117 6E       		.sleb128 -18
 1029 0118 09       		.uleb128 0x9
 1030 0119 0C020000 		.4byte	.LASF20
 1031 011d 01       		.byte	0x1
 1032 011e 25       		.byte	0x25
 1033 011f 6B000000 		.4byte	0x6b
 1034 0123 02       		.uleb128 0x2
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 23


 1035 0124 91       		.byte	0x91
 1036 0125 77       		.sleb128 -9
 1037 0126 09       		.uleb128 0x9
 1038 0127 44010000 		.4byte	.LASF21
 1039 012b 01       		.byte	0x1
 1040 012c 26       		.byte	0x26
 1041 012d BE000000 		.4byte	0xbe
 1042 0131 02       		.uleb128 0x2
 1043 0132 91       		.byte	0x91
 1044 0133 70       		.sleb128 -16
 1045 0134 00       		.byte	0
 1046 0135 07       		.uleb128 0x7
 1047 0136 43020000 		.4byte	.LASF23
 1048 013a 01       		.byte	0x1
 1049 013b 40       		.byte	0x40
 1050 013c 81000000 		.4byte	0x81
 1051 0140 00000000 		.4byte	.LFB35
 1052 0144 96000000 		.4byte	.LFE35-.LFB35
 1053 0148 01       		.uleb128 0x1
 1054 0149 9C       		.byte	0x9c
 1055 014a 95010000 		.4byte	0x195
 1056 014e 0A       		.uleb128 0xa
 1057 014f 13020000 		.4byte	.LASF24
 1058 0153 01       		.byte	0x1
 1059 0154 40       		.byte	0x40
 1060 0155 6B000000 		.4byte	0x6b
 1061 0159 02       		.uleb128 0x2
 1062 015a 91       		.byte	0x91
 1063 015b 67       		.sleb128 -25
 1064 015c 09       		.uleb128 0x9
 1065 015d 67020000 		.4byte	.LASF25
 1066 0161 01       		.byte	0x1
 1067 0162 41       		.byte	0x41
 1068 0163 6B000000 		.4byte	0x6b
 1069 0167 02       		.uleb128 0x2
 1070 0168 91       		.byte	0x91
 1071 0169 6F       		.sleb128 -17
 1072 016a 09       		.uleb128 0x9
 1073 016b 32010000 		.4byte	.LASF26
 1074 016f 01       		.byte	0x1
 1075 0170 42       		.byte	0x42
 1076 0171 6B000000 		.4byte	0x6b
 1077 0175 02       		.uleb128 0x2
 1078 0176 91       		.byte	0x91
 1079 0177 6E       		.sleb128 -18
 1080 0178 09       		.uleb128 0x9
 1081 0179 0C020000 		.4byte	.LASF20
 1082 017d 01       		.byte	0x1
 1083 017e 43       		.byte	0x43
 1084 017f 6B000000 		.4byte	0x6b
 1085 0183 02       		.uleb128 0x2
 1086 0184 91       		.byte	0x91
 1087 0185 77       		.sleb128 -9
 1088 0186 09       		.uleb128 0x9
 1089 0187 18020000 		.4byte	.LASF27
 1090 018b 01       		.byte	0x1
 1091 018c 44       		.byte	0x44
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 24


 1092 018d BE000000 		.4byte	0xbe
 1093 0191 02       		.uleb128 0x2
 1094 0192 91       		.byte	0x91
 1095 0193 70       		.sleb128 -16
 1096 0194 00       		.byte	0
 1097 0195 07       		.uleb128 0x7
 1098 0196 E3010000 		.4byte	.LASF28
 1099 019a 01       		.byte	0x1
 1100 019b 5A       		.byte	0x5a
 1101 019c 81000000 		.4byte	0x81
 1102 01a0 00000000 		.4byte	.LFB36
 1103 01a4 A4000000 		.4byte	.LFE36-.LFB36
 1104 01a8 01       		.uleb128 0x1
 1105 01a9 9C       		.byte	0x9c
 1106 01aa F5010000 		.4byte	0x1f5
 1107 01ae 0A       		.uleb128 0xa
 1108 01af 34020000 		.4byte	.LASF29
 1109 01b3 01       		.byte	0x1
 1110 01b4 5A       		.byte	0x5a
 1111 01b5 6B000000 		.4byte	0x6b
 1112 01b9 02       		.uleb128 0x2
 1113 01ba 91       		.byte	0x91
 1114 01bb 67       		.sleb128 -25
 1115 01bc 09       		.uleb128 0x9
 1116 01bd 98020000 		.4byte	.LASF30
 1117 01c1 01       		.byte	0x1
 1118 01c2 5B       		.byte	0x5b
 1119 01c3 6B000000 		.4byte	0x6b
 1120 01c7 02       		.uleb128 0x2
 1121 01c8 91       		.byte	0x91
 1122 01c9 6F       		.sleb128 -17
 1123 01ca 09       		.uleb128 0x9
 1124 01cb 00000000 		.4byte	.LASF31
 1125 01cf 01       		.byte	0x1
 1126 01d0 5C       		.byte	0x5c
 1127 01d1 6B000000 		.4byte	0x6b
 1128 01d5 02       		.uleb128 0x2
 1129 01d6 91       		.byte	0x91
 1130 01d7 6E       		.sleb128 -18
 1131 01d8 09       		.uleb128 0x9
 1132 01d9 0C020000 		.4byte	.LASF20
 1133 01dd 01       		.byte	0x1
 1134 01de 5D       		.byte	0x5d
 1135 01df 6B000000 		.4byte	0x6b
 1136 01e3 02       		.uleb128 0x2
 1137 01e4 91       		.byte	0x91
 1138 01e5 77       		.sleb128 -9
 1139 01e6 09       		.uleb128 0x9
 1140 01e7 2D010000 		.4byte	.LASF32
 1141 01eb 01       		.byte	0x1
 1142 01ec 5E       		.byte	0x5e
 1143 01ed BE000000 		.4byte	0xbe
 1144 01f1 02       		.uleb128 0x2
 1145 01f2 91       		.byte	0x91
 1146 01f3 70       		.sleb128 -16
 1147 01f4 00       		.byte	0
 1148 01f5 07       		.uleb128 0x7
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 25


 1149 01f6 B5020000 		.4byte	.LASF33
 1150 01fa 01       		.byte	0x1
 1151 01fb 75       		.byte	0x75
 1152 01fc 81000000 		.4byte	0x81
 1153 0200 00000000 		.4byte	.LFB37
 1154 0204 E4000000 		.4byte	.LFE37-.LFB37
 1155 0208 01       		.uleb128 0x1
 1156 0209 9C       		.byte	0x9c
 1157 020a 55020000 		.4byte	0x255
 1158 020e 0A       		.uleb128 0xa
 1159 020f 61020000 		.4byte	.LASF34
 1160 0213 01       		.byte	0x1
 1161 0214 75       		.byte	0x75
 1162 0215 6B000000 		.4byte	0x6b
 1163 0219 02       		.uleb128 0x2
 1164 021a 91       		.byte	0x91
 1165 021b 6F       		.sleb128 -17
 1166 021c 0A       		.uleb128 0xa
 1167 021d 3E010000 		.4byte	.LASF35
 1168 0221 01       		.byte	0x1
 1169 0222 75       		.byte	0x75
 1170 0223 6B000000 		.4byte	0x6b
 1171 0227 02       		.uleb128 0x2
 1172 0228 91       		.byte	0x91
 1173 0229 6E       		.sleb128 -18
 1174 022a 09       		.uleb128 0x9
 1175 022b 69000000 		.4byte	.LASF36
 1176 022f 01       		.byte	0x1
 1177 0230 76       		.byte	0x76
 1178 0231 6B000000 		.4byte	0x6b
 1179 0235 02       		.uleb128 0x2
 1180 0236 91       		.byte	0x91
 1181 0237 72       		.sleb128 -14
 1182 0238 09       		.uleb128 0x9
 1183 0239 7C020000 		.4byte	.LASF37
 1184 023d 01       		.byte	0x1
 1185 023e 77       		.byte	0x77
 1186 023f BE000000 		.4byte	0xbe
 1187 0243 02       		.uleb128 0x2
 1188 0244 91       		.byte	0x91
 1189 0245 74       		.sleb128 -12
 1190 0246 09       		.uleb128 0x9
 1191 0247 0C020000 		.4byte	.LASF20
 1192 024b 01       		.byte	0x1
 1193 024c 79       		.byte	0x79
 1194 024d 6B000000 		.4byte	0x6b
 1195 0251 02       		.uleb128 0x2
 1196 0252 91       		.byte	0x91
 1197 0253 73       		.sleb128 -13
 1198 0254 00       		.byte	0
 1199 0255 07       		.uleb128 0x7
 1200 0256 67010000 		.4byte	.LASF38
 1201 025a 01       		.byte	0x1
 1202 025b 96       		.byte	0x96
 1203 025c 81000000 		.4byte	0x81
 1204 0260 00000000 		.4byte	.LFB38
 1205 0264 C4000000 		.4byte	.LFE38-.LFB38
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 26


 1206 0268 01       		.uleb128 0x1
 1207 0269 9C       		.byte	0x9c
 1208 026a C3020000 		.4byte	0x2c3
 1209 026e 0A       		.uleb128 0xa
 1210 026f A3020000 		.4byte	.LASF39
 1211 0273 01       		.byte	0x1
 1212 0274 96       		.byte	0x96
 1213 0275 BE000000 		.4byte	0xbe
 1214 0279 02       		.uleb128 0x2
 1215 027a 91       		.byte	0x91
 1216 027b 6C       		.sleb128 -20
 1217 027c 0A       		.uleb128 0xa
 1218 027d 13020000 		.4byte	.LASF24
 1219 0281 01       		.byte	0x1
 1220 0282 96       		.byte	0x96
 1221 0283 BE000000 		.4byte	0xbe
 1222 0287 02       		.uleb128 0x2
 1223 0288 91       		.byte	0x91
 1224 0289 68       		.sleb128 -24
 1225 028a 0A       		.uleb128 0xa
 1226 028b 2D010000 		.4byte	.LASF32
 1227 028f 01       		.byte	0x1
 1228 0290 96       		.byte	0x96
 1229 0291 BE000000 		.4byte	0xbe
 1230 0295 02       		.uleb128 0x2
 1231 0296 91       		.byte	0x91
 1232 0297 64       		.sleb128 -28
 1233 0298 0A       		.uleb128 0xa
 1234 0299 7C020000 		.4byte	.LASF37
 1235 029d 01       		.byte	0x1
 1236 029e 96       		.byte	0x96
 1237 029f BE000000 		.4byte	0xbe
 1238 02a3 02       		.uleb128 0x2
 1239 02a4 91       		.byte	0x91
 1240 02a5 60       		.sleb128 -32
 1241 02a6 09       		.uleb128 0x9
 1242 02a7 99010000 		.4byte	.LASF40
 1243 02ab 01       		.byte	0x1
 1244 02ac 97       		.byte	0x97
 1245 02ad C3020000 		.4byte	0x2c3
 1246 02b1 02       		.uleb128 0x2
 1247 02b2 91       		.byte	0x91
 1248 02b3 74       		.sleb128 -12
 1249 02b4 09       		.uleb128 0x9
 1250 02b5 0C020000 		.4byte	.LASF20
 1251 02b9 01       		.byte	0x1
 1252 02ba 98       		.byte	0x98
 1253 02bb 6B000000 		.4byte	0x6b
 1254 02bf 02       		.uleb128 0x2
 1255 02c0 91       		.byte	0x91
 1256 02c1 77       		.sleb128 -9
 1257 02c2 00       		.byte	0
 1258 02c3 0B       		.uleb128 0xb
 1259 02c4 6B000000 		.4byte	0x6b
 1260 02c8 D3020000 		.4byte	0x2d3
 1261 02cc 0C       		.uleb128 0xc
 1262 02cd B7000000 		.4byte	0xb7
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 27


 1263 02d1 01       		.byte	0x1
 1264 02d2 00       		.byte	0
 1265 02d3 07       		.uleb128 0x7
 1266 02d4 7F010000 		.4byte	.LASF41
 1267 02d8 01       		.byte	0x1
 1268 02d9 B6       		.byte	0xb6
 1269 02da 81000000 		.4byte	0x81
 1270 02de 00000000 		.4byte	.LFB39
 1271 02e2 6C000000 		.4byte	.LFE39-.LFB39
 1272 02e6 01       		.uleb128 0x1
 1273 02e7 9C       		.byte	0x9c
 1274 02e8 25030000 		.4byte	0x325
 1275 02ec 0A       		.uleb128 0xa
 1276 02ed DE010000 		.4byte	.LASF42
 1277 02f1 01       		.byte	0x1
 1278 02f2 B6       		.byte	0xb6
 1279 02f3 25030000 		.4byte	0x325
 1280 02f7 02       		.uleb128 0x2
 1281 02f8 91       		.byte	0x91
 1282 02f9 6C       		.sleb128 -20
 1283 02fa 08       		.uleb128 0x8
 1284 02fb 68756D00 		.ascii	"hum\000"
 1285 02ff 01       		.byte	0x1
 1286 0300 B6       		.byte	0xb6
 1287 0301 25030000 		.4byte	0x325
 1288 0305 02       		.uleb128 0x2
 1289 0306 91       		.byte	0x91
 1290 0307 68       		.sleb128 -24
 1291 0308 09       		.uleb128 0x9
 1292 0309 99010000 		.4byte	.LASF40
 1293 030d 01       		.byte	0x1
 1294 030e B7       		.byte	0xb7
 1295 030f 2B030000 		.4byte	0x32b
 1296 0313 02       		.uleb128 0x2
 1297 0314 91       		.byte	0x91
 1298 0315 70       		.sleb128 -16
 1299 0316 09       		.uleb128 0x9
 1300 0317 0C020000 		.4byte	.LASF20
 1301 031b 01       		.byte	0x1
 1302 031c B8       		.byte	0xb8
 1303 031d 6B000000 		.4byte	0x6b
 1304 0321 02       		.uleb128 0x2
 1305 0322 91       		.byte	0x91
 1306 0323 77       		.sleb128 -9
 1307 0324 00       		.byte	0
 1308 0325 05       		.uleb128 0x5
 1309 0326 04       		.byte	0x4
 1310 0327 97000000 		.4byte	0x97
 1311 032b 0B       		.uleb128 0xb
 1312 032c 6B000000 		.4byte	0x6b
 1313 0330 3B030000 		.4byte	0x33b
 1314 0334 0C       		.uleb128 0xc
 1315 0335 B7000000 		.4byte	0xb7
 1316 0339 03       		.byte	0x3
 1317 033a 00       		.byte	0
 1318 033b 07       		.uleb128 0x7
 1319 033c C6020000 		.4byte	.LASF43
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 28


 1320 0340 01       		.byte	0x1
 1321 0341 C7       		.byte	0xc7
 1322 0342 81000000 		.4byte	0x81
 1323 0346 00000000 		.4byte	.LFB40
 1324 034a 5E000000 		.4byte	.LFE40-.LFB40
 1325 034e 01       		.uleb128 0x1
 1326 034f 9C       		.byte	0x9c
 1327 0350 7F030000 		.4byte	0x37f
 1328 0354 0A       		.uleb128 0xa
 1329 0355 0C000000 		.4byte	.LASF44
 1330 0359 01       		.byte	0x1
 1331 035a C7       		.byte	0xc7
 1332 035b 25030000 		.4byte	0x325
 1333 035f 02       		.uleb128 0x2
 1334 0360 91       		.byte	0x91
 1335 0361 6C       		.sleb128 -20
 1336 0362 09       		.uleb128 0x9
 1337 0363 99010000 		.4byte	.LASF40
 1338 0367 01       		.byte	0x1
 1339 0368 C8       		.byte	0xc8
 1340 0369 C3020000 		.4byte	0x2c3
 1341 036d 02       		.uleb128 0x2
 1342 036e 91       		.byte	0x91
 1343 036f 74       		.sleb128 -12
 1344 0370 09       		.uleb128 0x9
 1345 0371 0C020000 		.4byte	.LASF20
 1346 0375 01       		.byte	0x1
 1347 0376 C9       		.byte	0xc9
 1348 0377 6B000000 		.4byte	0x6b
 1349 037b 02       		.uleb128 0x2
 1350 037c 91       		.byte	0x91
 1351 037d 77       		.sleb128 -9
 1352 037e 00       		.byte	0
 1353 037f 0D       		.uleb128 0xd
 1354 0380 AA020000 		.4byte	.LASF45
 1355 0384 01       		.byte	0x1
 1356 0385 D8       		.byte	0xd8
 1357 0386 81000000 		.4byte	0x81
 1358 038a 00000000 		.4byte	.LFB41
 1359 038e 28000000 		.4byte	.LFE41-.LFB41
 1360 0392 01       		.uleb128 0x1
 1361 0393 9C       		.byte	0x9c
 1362 0394 B5030000 		.4byte	0x3b5
 1363 0398 0A       		.uleb128 0xa
 1364 0399 61020000 		.4byte	.LASF34
 1365 039d 01       		.byte	0x1
 1366 039e D8       		.byte	0xd8
 1367 039f 6B000000 		.4byte	0x6b
 1368 03a3 02       		.uleb128 0x2
 1369 03a4 91       		.byte	0x91
 1370 03a5 6F       		.sleb128 -17
 1371 03a6 0A       		.uleb128 0xa
 1372 03a7 87020000 		.4byte	.LASF46
 1373 03ab 01       		.byte	0x1
 1374 03ac D8       		.byte	0xd8
 1375 03ad B5030000 		.4byte	0x3b5
 1376 03b1 02       		.uleb128 0x2
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 29


 1377 03b2 91       		.byte	0x91
 1378 03b3 68       		.sleb128 -24
 1379 03b4 00       		.byte	0
 1380 03b5 05       		.uleb128 0x5
 1381 03b6 04       		.byte	0x4
 1382 03b7 8C000000 		.4byte	0x8c
 1383 03bb 0E       		.uleb128 0xe
 1384 03bc A8010000 		.4byte	.LASF51
 1385 03c0 01       		.byte	0x1
 1386 03c1 18       		.byte	0x18
 1387 03c2 6B000000 		.4byte	0x6b
 1388 03c6 05       		.uleb128 0x5
 1389 03c7 03       		.byte	0x3
 1390 03c8 00000000 		.4byte	irrigationStatus
 1391 03cc 00       		.byte	0
 1392              		.section	.debug_abbrev,"",%progbits
 1393              	.Ldebug_abbrev0:
 1394 0000 01       		.uleb128 0x1
 1395 0001 11       		.uleb128 0x11
 1396 0002 01       		.byte	0x1
 1397 0003 25       		.uleb128 0x25
 1398 0004 0E       		.uleb128 0xe
 1399 0005 13       		.uleb128 0x13
 1400 0006 0B       		.uleb128 0xb
 1401 0007 03       		.uleb128 0x3
 1402 0008 0E       		.uleb128 0xe
 1403 0009 1B       		.uleb128 0x1b
 1404 000a 0E       		.uleb128 0xe
 1405 000b 55       		.uleb128 0x55
 1406 000c 17       		.uleb128 0x17
 1407 000d 11       		.uleb128 0x11
 1408 000e 01       		.uleb128 0x1
 1409 000f 10       		.uleb128 0x10
 1410 0010 17       		.uleb128 0x17
 1411 0011 00       		.byte	0
 1412 0012 00       		.byte	0
 1413 0013 02       		.uleb128 0x2
 1414 0014 24       		.uleb128 0x24
 1415 0015 00       		.byte	0
 1416 0016 0B       		.uleb128 0xb
 1417 0017 0B       		.uleb128 0xb
 1418 0018 3E       		.uleb128 0x3e
 1419 0019 0B       		.uleb128 0xb
 1420 001a 03       		.uleb128 0x3
 1421 001b 0E       		.uleb128 0xe
 1422 001c 00       		.byte	0
 1423 001d 00       		.byte	0
 1424 001e 03       		.uleb128 0x3
 1425 001f 24       		.uleb128 0x24
 1426 0020 00       		.byte	0
 1427 0021 0B       		.uleb128 0xb
 1428 0022 0B       		.uleb128 0xb
 1429 0023 3E       		.uleb128 0x3e
 1430 0024 0B       		.uleb128 0xb
 1431 0025 03       		.uleb128 0x3
 1432 0026 08       		.uleb128 0x8
 1433 0027 00       		.byte	0
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 30


 1434 0028 00       		.byte	0
 1435 0029 04       		.uleb128 0x4
 1436 002a 16       		.uleb128 0x16
 1437 002b 00       		.byte	0
 1438 002c 03       		.uleb128 0x3
 1439 002d 0E       		.uleb128 0xe
 1440 002e 3A       		.uleb128 0x3a
 1441 002f 0B       		.uleb128 0xb
 1442 0030 3B       		.uleb128 0x3b
 1443 0031 0B       		.uleb128 0xb
 1444 0032 49       		.uleb128 0x49
 1445 0033 13       		.uleb128 0x13
 1446 0034 00       		.byte	0
 1447 0035 00       		.byte	0
 1448 0036 05       		.uleb128 0x5
 1449 0037 0F       		.uleb128 0xf
 1450 0038 00       		.byte	0
 1451 0039 0B       		.uleb128 0xb
 1452 003a 0B       		.uleb128 0xb
 1453 003b 49       		.uleb128 0x49
 1454 003c 13       		.uleb128 0x13
 1455 003d 00       		.byte	0
 1456 003e 00       		.byte	0
 1457 003f 06       		.uleb128 0x6
 1458 0040 2E       		.uleb128 0x2e
 1459 0041 00       		.byte	0
 1460 0042 3F       		.uleb128 0x3f
 1461 0043 19       		.uleb128 0x19
 1462 0044 03       		.uleb128 0x3
 1463 0045 0E       		.uleb128 0xe
 1464 0046 3A       		.uleb128 0x3a
 1465 0047 0B       		.uleb128 0xb
 1466 0048 3B       		.uleb128 0x3b
 1467 0049 0B       		.uleb128 0xb
 1468 004a 27       		.uleb128 0x27
 1469 004b 19       		.uleb128 0x19
 1470 004c 11       		.uleb128 0x11
 1471 004d 01       		.uleb128 0x1
 1472 004e 12       		.uleb128 0x12
 1473 004f 06       		.uleb128 0x6
 1474 0050 40       		.uleb128 0x40
 1475 0051 18       		.uleb128 0x18
 1476 0052 9642     		.uleb128 0x2116
 1477 0054 19       		.uleb128 0x19
 1478 0055 00       		.byte	0
 1479 0056 00       		.byte	0
 1480 0057 07       		.uleb128 0x7
 1481 0058 2E       		.uleb128 0x2e
 1482 0059 01       		.byte	0x1
 1483 005a 3F       		.uleb128 0x3f
 1484 005b 19       		.uleb128 0x19
 1485 005c 03       		.uleb128 0x3
 1486 005d 0E       		.uleb128 0xe
 1487 005e 3A       		.uleb128 0x3a
 1488 005f 0B       		.uleb128 0xb
 1489 0060 3B       		.uleb128 0x3b
 1490 0061 0B       		.uleb128 0xb
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 31


 1491 0062 27       		.uleb128 0x27
 1492 0063 19       		.uleb128 0x19
 1493 0064 49       		.uleb128 0x49
 1494 0065 13       		.uleb128 0x13
 1495 0066 11       		.uleb128 0x11
 1496 0067 01       		.uleb128 0x1
 1497 0068 12       		.uleb128 0x12
 1498 0069 06       		.uleb128 0x6
 1499 006a 40       		.uleb128 0x40
 1500 006b 18       		.uleb128 0x18
 1501 006c 9642     		.uleb128 0x2116
 1502 006e 19       		.uleb128 0x19
 1503 006f 01       		.uleb128 0x1
 1504 0070 13       		.uleb128 0x13
 1505 0071 00       		.byte	0
 1506 0072 00       		.byte	0
 1507 0073 08       		.uleb128 0x8
 1508 0074 05       		.uleb128 0x5
 1509 0075 00       		.byte	0
 1510 0076 03       		.uleb128 0x3
 1511 0077 08       		.uleb128 0x8
 1512 0078 3A       		.uleb128 0x3a
 1513 0079 0B       		.uleb128 0xb
 1514 007a 3B       		.uleb128 0x3b
 1515 007b 0B       		.uleb128 0xb
 1516 007c 49       		.uleb128 0x49
 1517 007d 13       		.uleb128 0x13
 1518 007e 02       		.uleb128 0x2
 1519 007f 18       		.uleb128 0x18
 1520 0080 00       		.byte	0
 1521 0081 00       		.byte	0
 1522 0082 09       		.uleb128 0x9
 1523 0083 34       		.uleb128 0x34
 1524 0084 00       		.byte	0
 1525 0085 03       		.uleb128 0x3
 1526 0086 0E       		.uleb128 0xe
 1527 0087 3A       		.uleb128 0x3a
 1528 0088 0B       		.uleb128 0xb
 1529 0089 3B       		.uleb128 0x3b
 1530 008a 0B       		.uleb128 0xb
 1531 008b 49       		.uleb128 0x49
 1532 008c 13       		.uleb128 0x13
 1533 008d 02       		.uleb128 0x2
 1534 008e 18       		.uleb128 0x18
 1535 008f 00       		.byte	0
 1536 0090 00       		.byte	0
 1537 0091 0A       		.uleb128 0xa
 1538 0092 05       		.uleb128 0x5
 1539 0093 00       		.byte	0
 1540 0094 03       		.uleb128 0x3
 1541 0095 0E       		.uleb128 0xe
 1542 0096 3A       		.uleb128 0x3a
 1543 0097 0B       		.uleb128 0xb
 1544 0098 3B       		.uleb128 0x3b
 1545 0099 0B       		.uleb128 0xb
 1546 009a 49       		.uleb128 0x49
 1547 009b 13       		.uleb128 0x13
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 32


 1548 009c 02       		.uleb128 0x2
 1549 009d 18       		.uleb128 0x18
 1550 009e 00       		.byte	0
 1551 009f 00       		.byte	0
 1552 00a0 0B       		.uleb128 0xb
 1553 00a1 01       		.uleb128 0x1
 1554 00a2 01       		.byte	0x1
 1555 00a3 49       		.uleb128 0x49
 1556 00a4 13       		.uleb128 0x13
 1557 00a5 01       		.uleb128 0x1
 1558 00a6 13       		.uleb128 0x13
 1559 00a7 00       		.byte	0
 1560 00a8 00       		.byte	0
 1561 00a9 0C       		.uleb128 0xc
 1562 00aa 21       		.uleb128 0x21
 1563 00ab 00       		.byte	0
 1564 00ac 49       		.uleb128 0x49
 1565 00ad 13       		.uleb128 0x13
 1566 00ae 2F       		.uleb128 0x2f
 1567 00af 0B       		.uleb128 0xb
 1568 00b0 00       		.byte	0
 1569 00b1 00       		.byte	0
 1570 00b2 0D       		.uleb128 0xd
 1571 00b3 2E       		.uleb128 0x2e
 1572 00b4 01       		.byte	0x1
 1573 00b5 3F       		.uleb128 0x3f
 1574 00b6 19       		.uleb128 0x19
 1575 00b7 03       		.uleb128 0x3
 1576 00b8 0E       		.uleb128 0xe
 1577 00b9 3A       		.uleb128 0x3a
 1578 00ba 0B       		.uleb128 0xb
 1579 00bb 3B       		.uleb128 0x3b
 1580 00bc 0B       		.uleb128 0xb
 1581 00bd 27       		.uleb128 0x27
 1582 00be 19       		.uleb128 0x19
 1583 00bf 49       		.uleb128 0x49
 1584 00c0 13       		.uleb128 0x13
 1585 00c1 11       		.uleb128 0x11
 1586 00c2 01       		.uleb128 0x1
 1587 00c3 12       		.uleb128 0x12
 1588 00c4 06       		.uleb128 0x6
 1589 00c5 40       		.uleb128 0x40
 1590 00c6 18       		.uleb128 0x18
 1591 00c7 9742     		.uleb128 0x2117
 1592 00c9 19       		.uleb128 0x19
 1593 00ca 01       		.uleb128 0x1
 1594 00cb 13       		.uleb128 0x13
 1595 00cc 00       		.byte	0
 1596 00cd 00       		.byte	0
 1597 00ce 0E       		.uleb128 0xe
 1598 00cf 34       		.uleb128 0x34
 1599 00d0 00       		.byte	0
 1600 00d1 03       		.uleb128 0x3
 1601 00d2 0E       		.uleb128 0xe
 1602 00d3 3A       		.uleb128 0x3a
 1603 00d4 0B       		.uleb128 0xb
 1604 00d5 3B       		.uleb128 0x3b
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 33


 1605 00d6 0B       		.uleb128 0xb
 1606 00d7 49       		.uleb128 0x49
 1607 00d8 13       		.uleb128 0x13
 1608 00d9 3F       		.uleb128 0x3f
 1609 00da 19       		.uleb128 0x19
 1610 00db 02       		.uleb128 0x2
 1611 00dc 18       		.uleb128 0x18
 1612 00dd 00       		.byte	0
 1613 00de 00       		.byte	0
 1614 00df 00       		.byte	0
 1615              		.section	.debug_aranges,"",%progbits
 1616 0000 5C000000 		.4byte	0x5c
 1617 0004 0200     		.2byte	0x2
 1618 0006 00000000 		.4byte	.Ldebug_info0
 1619 000a 04       		.byte	0x4
 1620 000b 00       		.byte	0
 1621 000c 0000     		.2byte	0
 1622 000e 0000     		.2byte	0
 1623 0010 00000000 		.4byte	.LFB33
 1624 0014 12000000 		.4byte	.LFE33-.LFB33
 1625 0018 00000000 		.4byte	.LFB34
 1626 001c A2000000 		.4byte	.LFE34-.LFB34
 1627 0020 00000000 		.4byte	.LFB35
 1628 0024 96000000 		.4byte	.LFE35-.LFB35
 1629 0028 00000000 		.4byte	.LFB36
 1630 002c A4000000 		.4byte	.LFE36-.LFB36
 1631 0030 00000000 		.4byte	.LFB37
 1632 0034 E4000000 		.4byte	.LFE37-.LFB37
 1633 0038 00000000 		.4byte	.LFB38
 1634 003c C4000000 		.4byte	.LFE38-.LFB38
 1635 0040 00000000 		.4byte	.LFB39
 1636 0044 6C000000 		.4byte	.LFE39-.LFB39
 1637 0048 00000000 		.4byte	.LFB40
 1638 004c 5E000000 		.4byte	.LFE40-.LFB40
 1639 0050 00000000 		.4byte	.LFB41
 1640 0054 28000000 		.4byte	.LFE41-.LFB41
 1641 0058 00000000 		.4byte	0
 1642 005c 00000000 		.4byte	0
 1643              		.section	.debug_ranges,"",%progbits
 1644              	.Ldebug_ranges0:
 1645 0000 00000000 		.4byte	.LFB33
 1646 0004 12000000 		.4byte	.LFE33
 1647 0008 00000000 		.4byte	.LFB34
 1648 000c A2000000 		.4byte	.LFE34
 1649 0010 00000000 		.4byte	.LFB35
 1650 0014 96000000 		.4byte	.LFE35
 1651 0018 00000000 		.4byte	.LFB36
 1652 001c A4000000 		.4byte	.LFE36
 1653 0020 00000000 		.4byte	.LFB37
 1654 0024 E4000000 		.4byte	.LFE37
 1655 0028 00000000 		.4byte	.LFB38
 1656 002c C4000000 		.4byte	.LFE38
 1657 0030 00000000 		.4byte	.LFB39
 1658 0034 6C000000 		.4byte	.LFE39
 1659 0038 00000000 		.4byte	.LFB40
 1660 003c 5E000000 		.4byte	.LFE40
 1661 0040 00000000 		.4byte	.LFB41
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 34


 1662 0044 28000000 		.4byte	.LFE41
 1663 0048 00000000 		.4byte	0
 1664 004c 00000000 		.4byte	0
 1665              		.section	.debug_line,"",%progbits
 1666              	.Ldebug_line0:
 1667 0000 47010000 		.section	.debug_str,"MS",%progbits,1
 1667      02004A00 
 1667      00000201 
 1667      FB0E0D00 
 1667      01010101 
 1668              	.LASF31:
 1669 0000 7475726E 		.ascii	"turnOffVent\000"
 1669      4F666656 
 1669      656E7400 
 1670              	.LASF44:
 1671 000c 6C696768 		.ascii	"light\000"
 1671      7400
 1672              	.LASF22:
 1673 0012 61646A75 		.ascii	"adjustWindow\000"
 1673      73745769 
 1673      6E646F77 
 1673      00
 1674              	.LASF49:
 1675 001f 433A5C55 		.ascii	"C:\\Users\\Lasse\\Documents\\GitHub\\PSoC_Master\\P"
 1675      73657273 
 1675      5C4C6173 
 1675      73655C44 
 1675      6F63756D 
 1676 004c 536F435F 		.ascii	"SoC_Master\\PSoC_Master.cydsn\000"
 1676      4D617374 
 1676      65725C50 
 1676      536F435F 
 1676      4D617374 
 1677              	.LASF36:
 1678 0069 69727269 		.ascii	"irriTransfer\000"
 1678      5472616E 
 1678      73666572 
 1678      00
 1679              	.LASF48:
 1680 0076 2E5C4932 		.ascii	".\\I2C_Class.c\000"
 1680      435F436C 
 1680      6173732E 
 1680      6300
 1681              	.LASF3:
 1682 0084 73686F72 		.ascii	"short unsigned int\000"
 1682      7420756E 
 1682      7369676E 
 1682      65642069 
 1682      6E7400
 1683              	.LASF9:
 1684 0097 75696E74 		.ascii	"uint8\000"
 1684      3800
 1685              	.LASF14:
 1686 009d 666C6F61 		.ascii	"float\000"
 1686      7400
 1687              	.LASF47:
 1688 00a3 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 35


 1688      4320342E 
 1688      382E3420 
 1688      32303134 
 1688      30353236 
 1689 00d6 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1689      20726576 
 1689      6973696F 
 1689      6E203231 
 1689      31333538 
 1690 0109 30202D66 		.ascii	"0 -ffunction-sections\000"
 1690      66756E63 
 1690      74696F6E 
 1690      2D736563 
 1690      74696F6E 
 1691              	.LASF1:
 1692 011f 756E7369 		.ascii	"unsigned char\000"
 1692      676E6564 
 1692      20636861 
 1692      7200
 1693              	.LASF32:
 1694 012d 76656E74 		.ascii	"vent\000"
 1694      00
 1695              	.LASF26:
 1696 0132 7475726E 		.ascii	"turnHeatOff\000"
 1696      48656174 
 1696      4F666600 
 1697              	.LASF35:
 1698 013e 6F6E4F66 		.ascii	"onOff\000"
 1698      6600
 1699              	.LASF21:
 1700 0144 74656D70 		.ascii	"tempWindow\000"
 1700      57696E64 
 1700      6F7700
 1701              	.LASF12:
 1702 014f 696E7431 		.ascii	"int16\000"
 1702      3600
 1703              	.LASF5:
 1704 0155 6C6F6E67 		.ascii	"long unsigned int\000"
 1704      20756E73 
 1704      69676E65 
 1704      6420696E 
 1704      7400
 1705              	.LASF38:
 1706 0167 67657441 		.ascii	"getActuatorStatus\000"
 1706      63747561 
 1706      746F7253 
 1706      74617475 
 1706      7300
 1707              	.LASF13:
 1708 0179 696E7433 		.ascii	"int32\000"
 1708      3200
 1709              	.LASF41:
 1710 017f 67657454 		.ascii	"getTempAndHum\000"
 1710      656D7041 
 1710      6E644875 
 1710      6D00
 1711              	.LASF0:
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 36


 1712 018d 7369676E 		.ascii	"signed char\000"
 1712      65642063 
 1712      68617200 
 1713              	.LASF40:
 1714 0199 64617461 		.ascii	"dataget\000"
 1714      67657400 
 1715              	.LASF15:
 1716 01a1 646F7562 		.ascii	"double\000"
 1716      6C6500
 1717              	.LASF51:
 1718 01a8 69727269 		.ascii	"irrigationStatus\000"
 1718      67617469 
 1718      6F6E5374 
 1718      61747573 
 1718      00
 1719              	.LASF19:
 1720 01b9 636C6F73 		.ascii	"closeWindow\000"
 1720      6557696E 
 1720      646F7700 
 1721              	.LASF10:
 1722 01c5 75696E74 		.ascii	"uint16\000"
 1722      313600
 1723              	.LASF11:
 1724 01cc 696E7438 		.ascii	"int8\000"
 1724      00
 1725              	.LASF8:
 1726 01d1 756E7369 		.ascii	"unsigned int\000"
 1726      676E6564 
 1726      20696E74 
 1726      00
 1727              	.LASF42:
 1728 01de 74656D70 		.ascii	"temp\000"
 1728      00
 1729              	.LASF28:
 1730 01e3 61646A75 		.ascii	"adjustVentilation\000"
 1730      73745665 
 1730      6E74696C 
 1730      6174696F 
 1730      6E00
 1731              	.LASF7:
 1732 01f5 6C6F6E67 		.ascii	"long long unsigned int\000"
 1732      206C6F6E 
 1732      6720756E 
 1732      7369676E 
 1732      65642069 
 1733              	.LASF20:
 1734 020c 72657375 		.ascii	"result\000"
 1734      6C7400
 1735              	.LASF24:
 1736 0213 68656174 		.ascii	"heat\000"
 1736      00
 1737              	.LASF27:
 1738 0218 74656D70 		.ascii	"tempHeat\000"
 1738      48656174 
 1738      00
 1739              	.LASF18:
 1740 0221 6F70656E 		.ascii	"openWindow\000"
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 37


 1740      57696E64 
 1740      6F7700
 1741              	.LASF50:
 1742 022c 696E6974 		.ascii	"initI2C\000"
 1742      49324300 
 1743              	.LASF29:
 1744 0234 73706565 		.ascii	"speed\000"
 1744      6400
 1745              	.LASF17:
 1746 023a 73697A65 		.ascii	"sizetype\000"
 1746      74797065 
 1746      00
 1747              	.LASF23:
 1748 0243 61646A75 		.ascii	"adjustHeat\000"
 1748      73744865 
 1748      617400
 1749              	.LASF6:
 1750 024e 6C6F6E67 		.ascii	"long long int\000"
 1750      206C6F6E 
 1750      6720696E 
 1750      7400
 1751              	.LASF16:
 1752 025c 63686172 		.ascii	"char\000"
 1752      00
 1753              	.LASF34:
 1754 0261 696E6465 		.ascii	"index\000"
 1754      7800
 1755              	.LASF25:
 1756 0267 7475726E 		.ascii	"turnHeatOn\000"
 1756      48656174 
 1756      4F6E00
 1757              	.LASF2:
 1758 0272 73686F72 		.ascii	"short int\000"
 1758      7420696E 
 1758      7400
 1759              	.LASF37:
 1760 027c 69727269 		.ascii	"irrigation\000"
 1760      67617469 
 1760      6F6E00
 1761              	.LASF46:
 1762 0287 736F696C 		.ascii	"soilHum\000"
 1762      48756D00 
 1763              	.LASF4:
 1764 028f 6C6F6E67 		.ascii	"long int\000"
 1764      20696E74 
 1764      00
 1765              	.LASF30:
 1766 0298 7475726E 		.ascii	"turnOnVent\000"
 1766      4F6E5665 
 1766      6E7400
 1767              	.LASF39:
 1768 02a3 77696E64 		.ascii	"window\000"
 1768      6F7700
 1769              	.LASF45:
 1770 02aa 67657453 		.ascii	"getSoilHum\000"
 1770      6F696C48 
 1770      756D00
ARM GAS  C:\Users\Lasse\AppData\Local\Temp\ccNKpOrQ.s 			page 38


 1771              	.LASF33:
 1772 02b5 61646A75 		.ascii	"adjustIrrigation\000"
 1772      73744972 
 1772      72696761 
 1772      74696F6E 
 1772      00
 1773              	.LASF43:
 1774 02c6 6765744C 		.ascii	"getLight\000"
 1774      69676874 
 1774      00
 1775              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
