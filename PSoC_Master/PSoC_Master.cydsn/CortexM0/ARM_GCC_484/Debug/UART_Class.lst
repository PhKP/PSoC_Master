ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 1


   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"UART_Class.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.comm	receivedCommand,1,1
  18              		.section	.text.initUART,"ax",%progbits
  19              		.align	2
  20              		.global	initUART
  21              		.code	16
  22              		.thumb_func
  23              		.type	initUART, %function
  24              	initUART:
  25              	.LFB33:
  26              		.file 1 ".\\UART_Class.c"
   1:.\UART_Class.c **** /* ========================================
   2:.\UART_Class.c ****  * 
   3:.\UART_Class.c ****  * AutoGreen - PSoC_Master
   4:.\UART_Class.c ****  * UART_Class.c
   5:.\UART_Class.c ****  * (Description)
   6:.\UART_Class.c ****  * PRJ3 - GRP9
   7:.\UART_Class.c ****  * 2015-03-31
   8:.\UART_Class.c ****  *
   9:.\UART_Class.c ****  * ========================================
  10:.\UART_Class.c **** */
  11:.\UART_Class.c **** 
  12:.\UART_Class.c **** // Include files
  13:.\UART_Class.c **** #include "UART_Class.h"
  14:.\UART_Class.c **** 
  15:.\UART_Class.c **** // Init
  16:.\UART_Class.c **** void initUART(void){
  27              		.loc 1 16 0
  28              		.cfi_startproc
  29 0000 80B5     		push	{r7, lr}
  30              		.cfi_def_cfa_offset 8
  31              		.cfi_offset 7, -8
  32              		.cfi_offset 14, -4
  33 0002 00AF     		add	r7, sp, #0
  34              		.cfi_def_cfa_register 7
  17:.\UART_Class.c ****     UART_Start();                   // Starts UART component
  35              		.loc 1 17 0
  36 0004 FFF7FEFF 		bl	UART_Start
  18:.\UART_Class.c **** }
  37              		.loc 1 18 0
  38 0008 BD46     		mov	sp, r7
  39              		@ sp needed
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 2


  40 000a 80BD     		pop	{r7, pc}
  41              		.cfi_endproc
  42              	.LFE33:
  43              		.size	initUART, .-initUART
  44              		.section	.text.respondTemp,"ax",%progbits
  45              		.align	2
  46              		.global	respondTemp
  47              		.code	16
  48              		.thumb_func
  49              		.type	respondTemp, %function
  50              	respondTemp:
  51              	.LFB34:
  19:.\UART_Class.c **** 
  20:.\UART_Class.c **** int8 respondTemp(uint8 temp){
  52              		.loc 1 20 0
  53              		.cfi_startproc
  54 0000 80B5     		push	{r7, lr}
  55              		.cfi_def_cfa_offset 8
  56              		.cfi_offset 7, -8
  57              		.cfi_offset 14, -4
  58 0002 82B0     		sub	sp, sp, #8
  59              		.cfi_def_cfa_offset 16
  60 0004 00AF     		add	r7, sp, #0
  61              		.cfi_def_cfa_register 7
  62 0006 021C     		mov	r2, r0
  63 0008 FB1D     		add	r3, r7, #7
  64 000a 1A70     		strb	r2, [r3]
  21:.\UART_Class.c ****     if(1 <= temp && temp <= 200 ){
  65              		.loc 1 21 0
  66 000c FB1D     		add	r3, r7, #7
  67 000e 1B78     		ldrb	r3, [r3]
  68 0010 002B     		cmp	r3, #0
  69 0012 0DD0     		beq	.L3
  70              		.loc 1 21 0 is_stmt 0 discriminator 1
  71 0014 FB1D     		add	r3, r7, #7
  72 0016 1B78     		ldrb	r3, [r3]
  73 0018 C82B     		cmp	r3, #200
  74 001a 09D8     		bhi	.L3
  22:.\UART_Class.c ****         // If temp is between 1 and 200(both inclusive) "T" and temp is sent to DevKit8000
  23:.\UART_Class.c ****         UART_UartPutChar('T');
  75              		.loc 1 23 0 is_stmt 1
  76 001c 5420     		mov	r0, #84
  77 001e FFF7FEFF 		bl	UART_SpiUartWriteTxData
  24:.\UART_Class.c ****         UART_UartPutChar(temp);
  78              		.loc 1 24 0
  79 0022 FB1D     		add	r3, r7, #7
  80 0024 1B78     		ldrb	r3, [r3]
  81 0026 181C     		mov	r0, r3
  82 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  25:.\UART_Class.c ****         return 0;
  83              		.loc 1 25 0
  84 002c 0023     		mov	r3, #0
  85 002e 06E0     		b	.L4
  86              	.L3:
  26:.\UART_Class.c ****     }
  27:.\UART_Class.c ****     else{
  28:.\UART_Class.c ****         // If temp isn't between 1 and 200(both inclusive) "XT" is sent to DevKit8000
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 3


  29:.\UART_Class.c ****         UART_UartPutChar('X');
  87              		.loc 1 29 0
  88 0030 5820     		mov	r0, #88
  89 0032 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  30:.\UART_Class.c ****         UART_UartPutChar('T');
  90              		.loc 1 30 0
  91 0036 5420     		mov	r0, #84
  92 0038 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  31:.\UART_Class.c ****         return -1;
  93              		.loc 1 31 0
  94 003c FF23     		mov	r3, #255
  95              	.L4:
  96 003e 5BB2     		sxtb	r3, r3
  32:.\UART_Class.c ****     }
  33:.\UART_Class.c **** }
  97              		.loc 1 33 0
  98 0040 181C     		mov	r0, r3
  99 0042 BD46     		mov	sp, r7
 100 0044 02B0     		add	sp, sp, #8
 101              		@ sp needed
 102 0046 80BD     		pop	{r7, pc}
 103              		.cfi_endproc
 104              	.LFE34:
 105              		.size	respondTemp, .-respondTemp
 106              		.section	.text.respondHum,"ax",%progbits
 107              		.align	2
 108              		.global	respondHum
 109              		.code	16
 110              		.thumb_func
 111              		.type	respondHum, %function
 112              	respondHum:
 113              	.LFB35:
  34:.\UART_Class.c **** 
  35:.\UART_Class.c **** int8 respondHum(uint8 hum){
 114              		.loc 1 35 0
 115              		.cfi_startproc
 116 0000 80B5     		push	{r7, lr}
 117              		.cfi_def_cfa_offset 8
 118              		.cfi_offset 7, -8
 119              		.cfi_offset 14, -4
 120 0002 82B0     		sub	sp, sp, #8
 121              		.cfi_def_cfa_offset 16
 122 0004 00AF     		add	r7, sp, #0
 123              		.cfi_def_cfa_register 7
 124 0006 021C     		mov	r2, r0
 125 0008 FB1D     		add	r3, r7, #7
 126 000a 1A70     		strb	r2, [r3]
  36:.\UART_Class.c ****     if(1 <= hum && hum <= 100 ){
 127              		.loc 1 36 0
 128 000c FB1D     		add	r3, r7, #7
 129 000e 1B78     		ldrb	r3, [r3]
 130 0010 002B     		cmp	r3, #0
 131 0012 0DD0     		beq	.L6
 132              		.loc 1 36 0 is_stmt 0 discriminator 1
 133 0014 FB1D     		add	r3, r7, #7
 134 0016 1B78     		ldrb	r3, [r3]
 135 0018 642B     		cmp	r3, #100
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 4


 136 001a 09D8     		bhi	.L6
  37:.\UART_Class.c ****         // If hum is between 1 and 100(both inclusive) "A" and hum is sent to DevKit8000
  38:.\UART_Class.c ****         UART_UartPutChar('A');
 137              		.loc 1 38 0 is_stmt 1
 138 001c 4120     		mov	r0, #65
 139 001e FFF7FEFF 		bl	UART_SpiUartWriteTxData
  39:.\UART_Class.c ****         UART_UartPutChar(hum);
 140              		.loc 1 39 0
 141 0022 FB1D     		add	r3, r7, #7
 142 0024 1B78     		ldrb	r3, [r3]
 143 0026 181C     		mov	r0, r3
 144 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  40:.\UART_Class.c ****         return 0;
 145              		.loc 1 40 0
 146 002c 0023     		mov	r3, #0
 147 002e 06E0     		b	.L7
 148              	.L6:
  41:.\UART_Class.c ****     }
  42:.\UART_Class.c ****     else{
  43:.\UART_Class.c ****         // If temp isn't between 1 and 100(both inclusive) "XA" is sent to DevKit8000
  44:.\UART_Class.c ****         UART_UartPutChar('X');
 149              		.loc 1 44 0
 150 0030 5820     		mov	r0, #88
 151 0032 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  45:.\UART_Class.c ****         UART_UartPutChar('A');
 152              		.loc 1 45 0
 153 0036 4120     		mov	r0, #65
 154 0038 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  46:.\UART_Class.c ****         return -1;
 155              		.loc 1 46 0
 156 003c FF23     		mov	r3, #255
 157              	.L7:
 158 003e 5BB2     		sxtb	r3, r3
  47:.\UART_Class.c ****     }
  48:.\UART_Class.c **** }
 159              		.loc 1 48 0
 160 0040 181C     		mov	r0, r3
 161 0042 BD46     		mov	sp, r7
 162 0044 02B0     		add	sp, sp, #8
 163              		@ sp needed
 164 0046 80BD     		pop	{r7, pc}
 165              		.cfi_endproc
 166              	.LFE35:
 167              		.size	respondHum, .-respondHum
 168              		.section	.text.respondLight,"ax",%progbits
 169              		.align	2
 170              		.global	respondLight
 171              		.code	16
 172              		.thumb_func
 173              		.type	respondLight, %function
 174              	respondLight:
 175              	.LFB36:
  49:.\UART_Class.c **** 
  50:.\UART_Class.c **** int8 respondLight(uint8 light){
 176              		.loc 1 50 0
 177              		.cfi_startproc
 178 0000 80B5     		push	{r7, lr}
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 5


 179              		.cfi_def_cfa_offset 8
 180              		.cfi_offset 7, -8
 181              		.cfi_offset 14, -4
 182 0002 82B0     		sub	sp, sp, #8
 183              		.cfi_def_cfa_offset 16
 184 0004 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
 186 0006 021C     		mov	r2, r0
 187 0008 FB1D     		add	r3, r7, #7
 188 000a 1A70     		strb	r2, [r3]
  51:.\UART_Class.c ****     if(1 <= light && light <= 100 ){
 189              		.loc 1 51 0
 190 000c FB1D     		add	r3, r7, #7
 191 000e 1B78     		ldrb	r3, [r3]
 192 0010 002B     		cmp	r3, #0
 193 0012 0DD0     		beq	.L9
 194              		.loc 1 51 0 is_stmt 0 discriminator 1
 195 0014 FB1D     		add	r3, r7, #7
 196 0016 1B78     		ldrb	r3, [r3]
 197 0018 642B     		cmp	r3, #100
 198 001a 09D8     		bhi	.L9
  52:.\UART_Class.c ****         // If light is between 1 and 100(both inclusive) "L" and light is sent to DevKit8000
  53:.\UART_Class.c ****         UART_UartPutChar('L');
 199              		.loc 1 53 0 is_stmt 1
 200 001c 4C20     		mov	r0, #76
 201 001e FFF7FEFF 		bl	UART_SpiUartWriteTxData
  54:.\UART_Class.c ****         UART_UartPutChar(light);
 202              		.loc 1 54 0
 203 0022 FB1D     		add	r3, r7, #7
 204 0024 1B78     		ldrb	r3, [r3]
 205 0026 181C     		mov	r0, r3
 206 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  55:.\UART_Class.c ****         return 0;
 207              		.loc 1 55 0
 208 002c 0023     		mov	r3, #0
 209 002e 06E0     		b	.L10
 210              	.L9:
  56:.\UART_Class.c ****     }
  57:.\UART_Class.c ****     else{
  58:.\UART_Class.c **** 
  59:.\UART_Class.c ****         // If light isn't between 1 and 100(both inclusive) "XL" is sent to DevKit8000
  60:.\UART_Class.c ****         UART_UartPutChar('X');
 211              		.loc 1 60 0
 212 0030 5820     		mov	r0, #88
 213 0032 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  61:.\UART_Class.c ****         UART_UartPutChar('L');
 214              		.loc 1 61 0
 215 0036 4C20     		mov	r0, #76
 216 0038 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  62:.\UART_Class.c ****         return -1;
 217              		.loc 1 62 0
 218 003c FF23     		mov	r3, #255
 219              	.L10:
 220 003e 5BB2     		sxtb	r3, r3
  63:.\UART_Class.c ****     }
  64:.\UART_Class.c **** }
 221              		.loc 1 64 0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 6


 222 0040 181C     		mov	r0, r3
 223 0042 BD46     		mov	sp, r7
 224 0044 02B0     		add	sp, sp, #8
 225              		@ sp needed
 226 0046 80BD     		pop	{r7, pc}
 227              		.cfi_endproc
 228              	.LFE36:
 229              		.size	respondLight, .-respondLight
 230              		.section	.text.respondSoilHum,"ax",%progbits
 231              		.align	2
 232              		.global	respondSoilHum
 233              		.code	16
 234              		.thumb_func
 235              		.type	respondSoilHum, %function
 236              	respondSoilHum:
 237              	.LFB37:
  65:.\UART_Class.c **** 
  66:.\UART_Class.c **** int8 respondSoilHum(uint8 index, uint8 soilHum){
 238              		.loc 1 66 0
 239              		.cfi_startproc
 240 0000 80B5     		push	{r7, lr}
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 7, -8
 243              		.cfi_offset 14, -4
 244 0002 82B0     		sub	sp, sp, #8
 245              		.cfi_def_cfa_offset 16
 246 0004 00AF     		add	r7, sp, #0
 247              		.cfi_def_cfa_register 7
 248 0006 0A1C     		mov	r2, r1
 249 0008 FB1D     		add	r3, r7, #7
 250 000a 011C     		add	r1, r0, #0
 251 000c 1970     		strb	r1, [r3]
 252 000e BB1D     		add	r3, r7, #6
 253 0010 1A70     		strb	r2, [r3]
  67:.\UART_Class.c ****     if(1 <= soilHum && soilHum <= 10){
 254              		.loc 1 67 0
 255 0012 BB1D     		add	r3, r7, #6
 256 0014 1B78     		ldrb	r3, [r3]
 257 0016 002B     		cmp	r3, #0
 258 0018 12D0     		beq	.L12
 259              		.loc 1 67 0 is_stmt 0 discriminator 1
 260 001a BB1D     		add	r3, r7, #6
 261 001c 1B78     		ldrb	r3, [r3]
 262 001e 0A2B     		cmp	r3, #10
 263 0020 0ED8     		bhi	.L12
  68:.\UART_Class.c ****         // If soilHum is between 1 and 10(both inclusive) "S", the index number and soilHum is sent
  69:.\UART_Class.c ****         UART_UartPutChar('S');
 264              		.loc 1 69 0 is_stmt 1
 265 0022 5320     		mov	r0, #83
 266 0024 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  70:.\UART_Class.c ****         UART_UartPutChar(index);
 267              		.loc 1 70 0
 268 0028 FB1D     		add	r3, r7, #7
 269 002a 1B78     		ldrb	r3, [r3]
 270 002c 181C     		mov	r0, r3
 271 002e FFF7FEFF 		bl	UART_SpiUartWriteTxData
  71:.\UART_Class.c ****         UART_UartPutChar(soilHum);
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 7


 272              		.loc 1 71 0
 273 0032 BB1D     		add	r3, r7, #6
 274 0034 1B78     		ldrb	r3, [r3]
 275 0036 181C     		mov	r0, r3
 276 0038 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  72:.\UART_Class.c ****         return 0;
 277              		.loc 1 72 0
 278 003c 0023     		mov	r3, #0
 279 003e 06E0     		b	.L13
 280              	.L12:
  73:.\UART_Class.c ****     }
  74:.\UART_Class.c ****     else{
  75:.\UART_Class.c ****         // If soilHum isn't between 1 and 10(both inclusive) "XS" is sent to DevKit8000
  76:.\UART_Class.c ****         UART_UartPutChar('X');
 281              		.loc 1 76 0
 282 0040 5820     		mov	r0, #88
 283 0042 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  77:.\UART_Class.c ****         UART_UartPutChar('S');
 284              		.loc 1 77 0
 285 0046 5320     		mov	r0, #83
 286 0048 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  78:.\UART_Class.c ****         return -1;
 287              		.loc 1 78 0
 288 004c FF23     		mov	r3, #255
 289              	.L13:
 290 004e 5BB2     		sxtb	r3, r3
  79:.\UART_Class.c ****     }
  80:.\UART_Class.c **** }
 291              		.loc 1 80 0
 292 0050 181C     		mov	r0, r3
 293 0052 BD46     		mov	sp, r7
 294 0054 02B0     		add	sp, sp, #8
 295              		@ sp needed
 296 0056 80BD     		pop	{r7, pc}
 297              		.cfi_endproc
 298              	.LFE37:
 299              		.size	respondSoilHum, .-respondSoilHum
 300              		.section	.text.respondHeat,"ax",%progbits
 301              		.align	2
 302              		.global	respondHeat
 303              		.code	16
 304              		.thumb_func
 305              		.type	respondHeat, %function
 306              	respondHeat:
 307              	.LFB38:
  81:.\UART_Class.c **** 
  82:.\UART_Class.c **** int8 respondHeat(int8 heatStatus, uint8 onOff){
 308              		.loc 1 82 0
 309              		.cfi_startproc
 310 0000 80B5     		push	{r7, lr}
 311              		.cfi_def_cfa_offset 8
 312              		.cfi_offset 7, -8
 313              		.cfi_offset 14, -4
 314 0002 82B0     		sub	sp, sp, #8
 315              		.cfi_def_cfa_offset 16
 316 0004 00AF     		add	r7, sp, #0
 317              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 8


 318 0006 0A1C     		mov	r2, r1
 319 0008 FB1D     		add	r3, r7, #7
 320 000a 011C     		add	r1, r0, #0
 321 000c 1970     		strb	r1, [r3]
 322 000e BB1D     		add	r3, r7, #6
 323 0010 1A70     		strb	r2, [r3]
  83:.\UART_Class.c ****     if(heatStatus == 0){
 324              		.loc 1 83 0
 325 0012 FB1D     		add	r3, r7, #7
 326 0014 1B78     		ldrb	r3, [r3]
 327 0016 5BB2     		sxtb	r3, r3
 328 0018 002B     		cmp	r3, #0
 329 001a 06D1     		bne	.L15
  84:.\UART_Class.c ****         // If heatStatus is 0 then onOff('H' or 'K') is sent to DevKit8000
  85:.\UART_Class.c ****         UART_UartPutChar(onOff);
 330              		.loc 1 85 0
 331 001c BB1D     		add	r3, r7, #6
 332 001e 1B78     		ldrb	r3, [r3]
 333 0020 181C     		mov	r0, r3
 334 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  86:.\UART_Class.c ****         return 0;
 335              		.loc 1 86 0
 336 0026 0023     		mov	r3, #0
 337 0028 08E0     		b	.L16
 338              	.L15:
  87:.\UART_Class.c ****     }
  88:.\UART_Class.c ****     else{
  89:.\UART_Class.c ****         // If heatStatus isn't 0 then 'X' and onOff('H' or 'K') is sent to DevKit8000
  90:.\UART_Class.c ****         UART_UartPutChar('X');
 339              		.loc 1 90 0
 340 002a 5820     		mov	r0, #88
 341 002c FFF7FEFF 		bl	UART_SpiUartWriteTxData
  91:.\UART_Class.c ****         UART_UartPutChar(onOff);
 342              		.loc 1 91 0
 343 0030 BB1D     		add	r3, r7, #6
 344 0032 1B78     		ldrb	r3, [r3]
 345 0034 181C     		mov	r0, r3
 346 0036 FFF7FEFF 		bl	UART_SpiUartWriteTxData
  92:.\UART_Class.c ****         return -1;
 347              		.loc 1 92 0
 348 003a FF23     		mov	r3, #255
 349              	.L16:
 350 003c 5BB2     		sxtb	r3, r3
  93:.\UART_Class.c ****     }
  94:.\UART_Class.c **** }
 351              		.loc 1 94 0
 352 003e 181C     		mov	r0, r3
 353 0040 BD46     		mov	sp, r7
 354 0042 02B0     		add	sp, sp, #8
 355              		@ sp needed
 356 0044 80BD     		pop	{r7, pc}
 357              		.cfi_endproc
 358              	.LFE38:
 359              		.size	respondHeat, .-respondHeat
 360 0046 C046     		.section	.text.respondWin,"ax",%progbits
 361              		.align	2
 362              		.global	respondWin
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 9


 363              		.code	16
 364              		.thumb_func
 365              		.type	respondWin, %function
 366              	respondWin:
 367              	.LFB39:
  95:.\UART_Class.c **** 
  96:.\UART_Class.c **** int8 respondWin(int8 winStatus){
 368              		.loc 1 96 0
 369              		.cfi_startproc
 370 0000 80B5     		push	{r7, lr}
 371              		.cfi_def_cfa_offset 8
 372              		.cfi_offset 7, -8
 373              		.cfi_offset 14, -4
 374 0002 82B0     		sub	sp, sp, #8
 375              		.cfi_def_cfa_offset 16
 376 0004 00AF     		add	r7, sp, #0
 377              		.cfi_def_cfa_register 7
 378 0006 021C     		mov	r2, r0
 379 0008 FB1D     		add	r3, r7, #7
 380 000a 1A70     		strb	r2, [r3]
  97:.\UART_Class.c ****     if(winStatus == 0){
 381              		.loc 1 97 0
 382 000c FB1D     		add	r3, r7, #7
 383 000e 1B78     		ldrb	r3, [r3]
 384 0010 5BB2     		sxtb	r3, r3
 385 0012 002B     		cmp	r3, #0
 386 0014 04D1     		bne	.L18
  98:.\UART_Class.c ****         // If winStatus is 0 then 'W' is sent to DevKit8000
  99:.\UART_Class.c ****         UART_UartPutChar('W');
 387              		.loc 1 99 0
 388 0016 5720     		mov	r0, #87
 389 0018 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 100:.\UART_Class.c ****         return 0;
 390              		.loc 1 100 0
 391 001c 0023     		mov	r3, #0
 392 001e 06E0     		b	.L19
 393              	.L18:
 101:.\UART_Class.c ****     }
 102:.\UART_Class.c ****     else{
 103:.\UART_Class.c ****         // If heatStatus isn't 0 then "XW" is sent to DevKit8000
 104:.\UART_Class.c ****         UART_UartPutChar('X');
 394              		.loc 1 104 0
 395 0020 5820     		mov	r0, #88
 396 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 105:.\UART_Class.c ****         UART_UartPutChar('W');
 397              		.loc 1 105 0
 398 0026 5720     		mov	r0, #87
 399 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 106:.\UART_Class.c ****         return -1;
 400              		.loc 1 106 0
 401 002c FF23     		mov	r3, #255
 402              	.L19:
 403 002e 5BB2     		sxtb	r3, r3
 107:.\UART_Class.c ****     }
 108:.\UART_Class.c **** }
 404              		.loc 1 108 0
 405 0030 181C     		mov	r0, r3
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 10


 406 0032 BD46     		mov	sp, r7
 407 0034 02B0     		add	sp, sp, #8
 408              		@ sp needed
 409 0036 80BD     		pop	{r7, pc}
 410              		.cfi_endproc
 411              	.LFE39:
 412              		.size	respondWin, .-respondWin
 413              		.section	.text.respondVent,"ax",%progbits
 414              		.align	2
 415              		.global	respondVent
 416              		.code	16
 417              		.thumb_func
 418              		.type	respondVent, %function
 419              	respondVent:
 420              	.LFB40:
 109:.\UART_Class.c **** 
 110:.\UART_Class.c **** int8 respondVent(int8 ventStatus){
 421              		.loc 1 110 0
 422              		.cfi_startproc
 423 0000 80B5     		push	{r7, lr}
 424              		.cfi_def_cfa_offset 8
 425              		.cfi_offset 7, -8
 426              		.cfi_offset 14, -4
 427 0002 82B0     		sub	sp, sp, #8
 428              		.cfi_def_cfa_offset 16
 429 0004 00AF     		add	r7, sp, #0
 430              		.cfi_def_cfa_register 7
 431 0006 021C     		mov	r2, r0
 432 0008 FB1D     		add	r3, r7, #7
 433 000a 1A70     		strb	r2, [r3]
 111:.\UART_Class.c ****     if(ventStatus == 0){
 434              		.loc 1 111 0
 435 000c FB1D     		add	r3, r7, #7
 436 000e 1B78     		ldrb	r3, [r3]
 437 0010 5BB2     		sxtb	r3, r3
 438 0012 002B     		cmp	r3, #0
 439 0014 04D1     		bne	.L21
 112:.\UART_Class.c ****         // If ventStatus is 0 then 'V' is sent to DevKit8000
 113:.\UART_Class.c ****         UART_UartPutChar('V');
 440              		.loc 1 113 0
 441 0016 5620     		mov	r0, #86
 442 0018 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 114:.\UART_Class.c ****         return 0;
 443              		.loc 1 114 0
 444 001c 0023     		mov	r3, #0
 445 001e 06E0     		b	.L22
 446              	.L21:
 115:.\UART_Class.c ****     }
 116:.\UART_Class.c ****     else{
 117:.\UART_Class.c ****         // If ventStatus isn't 0 then "XV" is sent to DevKit8000
 118:.\UART_Class.c ****         UART_UartPutChar('X');
 447              		.loc 1 118 0
 448 0020 5820     		mov	r0, #88
 449 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 119:.\UART_Class.c ****         UART_UartPutChar('V');
 450              		.loc 1 119 0
 451 0026 5620     		mov	r0, #86
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 11


 452 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 120:.\UART_Class.c ****         return -1;
 453              		.loc 1 120 0
 454 002c FF23     		mov	r3, #255
 455              	.L22:
 456 002e 5BB2     		sxtb	r3, r3
 121:.\UART_Class.c ****     }
 122:.\UART_Class.c **** }
 457              		.loc 1 122 0
 458 0030 181C     		mov	r0, r3
 459 0032 BD46     		mov	sp, r7
 460 0034 02B0     		add	sp, sp, #8
 461              		@ sp needed
 462 0036 80BD     		pop	{r7, pc}
 463              		.cfi_endproc
 464              	.LFE40:
 465              		.size	respondVent, .-respondVent
 466              		.section	.text.respondIrri,"ax",%progbits
 467              		.align	2
 468              		.global	respondIrri
 469              		.code	16
 470              		.thumb_func
 471              		.type	respondIrri, %function
 472              	respondIrri:
 473              	.LFB41:
 123:.\UART_Class.c **** 
 124:.\UART_Class.c **** int8 respondIrri(int8 irriStatus){
 474              		.loc 1 124 0
 475              		.cfi_startproc
 476 0000 80B5     		push	{r7, lr}
 477              		.cfi_def_cfa_offset 8
 478              		.cfi_offset 7, -8
 479              		.cfi_offset 14, -4
 480 0002 82B0     		sub	sp, sp, #8
 481              		.cfi_def_cfa_offset 16
 482 0004 00AF     		add	r7, sp, #0
 483              		.cfi_def_cfa_register 7
 484 0006 021C     		mov	r2, r0
 485 0008 FB1D     		add	r3, r7, #7
 486 000a 1A70     		strb	r2, [r3]
 125:.\UART_Class.c ****     if(irriStatus == 0){
 487              		.loc 1 125 0
 488 000c FB1D     		add	r3, r7, #7
 489 000e 1B78     		ldrb	r3, [r3]
 490 0010 5BB2     		sxtb	r3, r3
 491 0012 002B     		cmp	r3, #0
 492 0014 04D1     		bne	.L24
 126:.\UART_Class.c ****         // If irriStatus is 0 then 'F' is sent to DevKit8000
 127:.\UART_Class.c ****         UART_UartPutChar('F');
 493              		.loc 1 127 0
 494 0016 4620     		mov	r0, #70
 495 0018 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 128:.\UART_Class.c ****         return 0;
 496              		.loc 1 128 0
 497 001c 0023     		mov	r3, #0
 498 001e 06E0     		b	.L25
 499              	.L24:
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 12


 129:.\UART_Class.c ****     }
 130:.\UART_Class.c ****     else{
 131:.\UART_Class.c ****         // If irriStatus isn't 0 then "XF" is sent to DevKit8000
 132:.\UART_Class.c ****         UART_UartPutChar('X');
 500              		.loc 1 132 0
 501 0020 5820     		mov	r0, #88
 502 0022 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 133:.\UART_Class.c ****         UART_UartPutChar('F');
 503              		.loc 1 133 0
 504 0026 4620     		mov	r0, #70
 505 0028 FFF7FEFF 		bl	UART_SpiUartWriteTxData
 134:.\UART_Class.c ****         return -1;
 506              		.loc 1 134 0
 507 002c FF23     		mov	r3, #255
 508              	.L25:
 509 002e 5BB2     		sxtb	r3, r3
 135:.\UART_Class.c ****     }
 136:.\UART_Class.c **** }
 510              		.loc 1 136 0
 511 0030 181C     		mov	r0, r3
 512 0032 BD46     		mov	sp, r7
 513 0034 02B0     		add	sp, sp, #8
 514              		@ sp needed
 515 0036 80BD     		pop	{r7, pc}
 516              		.cfi_endproc
 517              	.LFE41:
 518              		.size	respondIrri, .-respondIrri
 519              		.section	.text.dkRequest,"ax",%progbits
 520              		.align	2
 521              		.global	dkRequest
 522              		.code	16
 523              		.thumb_func
 524              		.type	dkRequest, %function
 525              	dkRequest:
 526              	.LFB42:
 137:.\UART_Class.c **** 
 138:.\UART_Class.c **** uint8 dkRequest(void){
 527              		.loc 1 138 0
 528              		.cfi_startproc
 529 0000 80B5     		push	{r7, lr}
 530              		.cfi_def_cfa_offset 8
 531              		.cfi_offset 7, -8
 532              		.cfi_offset 14, -4
 533 0002 00AF     		add	r7, sp, #0
 534              		.cfi_def_cfa_register 7
 139:.\UART_Class.c ****     // Reads the UART buffer
 140:.\UART_Class.c ****     return UART_UartGetChar();
 535              		.loc 1 140 0
 536 0004 FFF7FEFF 		bl	UART_UartGetChar
 537 0008 031C     		mov	r3, r0
 538 000a DBB2     		uxtb	r3, r3
 141:.\UART_Class.c **** }
 539              		.loc 1 141 0
 540 000c 181C     		mov	r0, r3
 541 000e BD46     		mov	sp, r7
 542              		@ sp needed
 543 0010 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 13


 544              		.cfi_endproc
 545              	.LFE42:
 546              		.size	dkRequest, .-dkRequest
 547 0012 C046     		.text
 548              	.Letext0:
 549              		.file 2 ".\\Generated_Source\\PSoC4/cytypes.h"
 550              		.file 3 ".\\UART_Class.h"
 551              		.section	.debug_info,"",%progbits
 552              	.Ldebug_info0:
 553 0000 38020000 		.4byte	0x238
 554 0004 0400     		.2byte	0x4
 555 0006 00000000 		.4byte	.Ldebug_abbrev0
 556 000a 04       		.byte	0x4
 557 000b 01       		.uleb128 0x1
 558 000c 3F000000 		.4byte	.LASF33
 559 0010 01       		.byte	0x1
 560 0011 2D020000 		.4byte	.LASF34
 561 0015 84010000 		.4byte	.LASF35
 562 0019 00000000 		.4byte	.Ldebug_ranges0+0
 563 001d 00000000 		.4byte	0
 564 0021 00000000 		.4byte	.Ldebug_line0
 565 0025 02       		.uleb128 0x2
 566 0026 01       		.byte	0x1
 567 0027 06       		.byte	0x6
 568 0028 4B020000 		.4byte	.LASF0
 569 002c 02       		.uleb128 0x2
 570 002d 01       		.byte	0x1
 571 002e 08       		.byte	0x8
 572 002f BB000000 		.4byte	.LASF1
 573 0033 02       		.uleb128 0x2
 574 0034 02       		.byte	0x2
 575 0035 05       		.byte	0x5
 576 0036 1D020000 		.4byte	.LASF2
 577 003a 02       		.uleb128 0x2
 578 003b 02       		.byte	0x2
 579 003c 07       		.byte	0x7
 580 003d 1A000000 		.4byte	.LASF3
 581 0041 02       		.uleb128 0x2
 582 0042 04       		.byte	0x4
 583 0043 05       		.byte	0x5
 584 0044 11000000 		.4byte	.LASF4
 585 0048 02       		.uleb128 0x2
 586 0049 04       		.byte	0x4
 587 004a 07       		.byte	0x7
 588 004b D8000000 		.4byte	.LASF5
 589 004f 02       		.uleb128 0x2
 590 0050 08       		.byte	0x8
 591 0051 05       		.byte	0x5
 592 0052 F3010000 		.4byte	.LASF6
 593 0056 02       		.uleb128 0x2
 594 0057 08       		.byte	0x8
 595 0058 07       		.byte	0x7
 596 0059 54010000 		.4byte	.LASF7
 597 005d 03       		.uleb128 0x3
 598 005e 04       		.byte	0x4
 599 005f 05       		.byte	0x5
 600 0060 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 14


 601 0064 02       		.uleb128 0x2
 602 0065 04       		.byte	0x4
 603 0066 07       		.byte	0x7
 604 0067 30010000 		.4byte	.LASF8
 605 006b 04       		.uleb128 0x4
 606 006c EF000000 		.4byte	.LASF9
 607 0070 02       		.byte	0x2
 608 0071 A1       		.byte	0xa1
 609 0072 2C000000 		.4byte	0x2c
 610 0076 04       		.uleb128 0x4
 611 0077 29010000 		.4byte	.LASF10
 612 007b 02       		.byte	0x2
 613 007c A3       		.byte	0xa3
 614 007d 48000000 		.4byte	0x48
 615 0081 04       		.uleb128 0x4
 616 0082 24010000 		.4byte	.LASF11
 617 0086 02       		.byte	0x2
 618 0087 A4       		.byte	0xa4
 619 0088 25000000 		.4byte	0x25
 620 008c 02       		.uleb128 0x2
 621 008d 04       		.byte	0x4
 622 008e 04       		.byte	0x4
 623 008f 39000000 		.4byte	.LASF12
 624 0093 02       		.uleb128 0x2
 625 0094 08       		.byte	0x8
 626 0095 04       		.byte	0x4
 627 0096 00010000 		.4byte	.LASF13
 628 009a 02       		.uleb128 0x2
 629 009b 01       		.byte	0x1
 630 009c 08       		.byte	0x8
 631 009d 01020000 		.4byte	.LASF14
 632 00a1 02       		.uleb128 0x2
 633 00a2 04       		.byte	0x4
 634 00a3 07       		.byte	0x7
 635 00a4 EA010000 		.4byte	.LASF15
 636 00a8 05       		.uleb128 0x5
 637 00a9 CF000000 		.4byte	.LASF36
 638 00ad 01       		.byte	0x1
 639 00ae 10       		.byte	0x10
 640 00af 00000000 		.4byte	.LFB33
 641 00b3 0C000000 		.4byte	.LFE33-.LFB33
 642 00b7 01       		.uleb128 0x1
 643 00b8 9C       		.byte	0x9c
 644 00b9 06       		.uleb128 0x6
 645 00ba 6B010000 		.4byte	.LASF16
 646 00be 01       		.byte	0x1
 647 00bf 14       		.byte	0x14
 648 00c0 81000000 		.4byte	0x81
 649 00c4 00000000 		.4byte	.LFB34
 650 00c8 48000000 		.4byte	.LFE34-.LFB34
 651 00cc 01       		.uleb128 0x1
 652 00cd 9C       		.byte	0x9c
 653 00ce E1000000 		.4byte	0xe1
 654 00d2 07       		.uleb128 0x7
 655 00d3 EA000000 		.4byte	.LASF18
 656 00d7 01       		.byte	0x1
 657 00d8 14       		.byte	0x14
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 15


 658 00d9 6B000000 		.4byte	0x6b
 659 00dd 02       		.uleb128 0x2
 660 00de 91       		.byte	0x91
 661 00df 77       		.sleb128 -9
 662 00e0 00       		.byte	0
 663 00e1 06       		.uleb128 0x6
 664 00e2 3D010000 		.4byte	.LASF17
 665 00e6 01       		.byte	0x1
 666 00e7 23       		.byte	0x23
 667 00e8 81000000 		.4byte	0x81
 668 00ec 00000000 		.4byte	.LFB35
 669 00f0 48000000 		.4byte	.LFE35-.LFB35
 670 00f4 01       		.uleb128 0x1
 671 00f5 9C       		.byte	0x9c
 672 00f6 09010000 		.4byte	0x109
 673 00fa 08       		.uleb128 0x8
 674 00fb 68756D00 		.ascii	"hum\000"
 675 00ff 01       		.byte	0x1
 676 0100 23       		.byte	0x23
 677 0101 6B000000 		.4byte	0x6b
 678 0105 02       		.uleb128 0x2
 679 0106 91       		.byte	0x91
 680 0107 77       		.sleb128 -9
 681 0108 00       		.byte	0
 682 0109 06       		.uleb128 0x6
 683 010a 77010000 		.4byte	.LASF19
 684 010e 01       		.byte	0x1
 685 010f 32       		.byte	0x32
 686 0110 81000000 		.4byte	0x81
 687 0114 00000000 		.4byte	.LFB36
 688 0118 48000000 		.4byte	.LFE36-.LFB36
 689 011c 01       		.uleb128 0x1
 690 011d 9C       		.byte	0x9c
 691 011e 31010000 		.4byte	0x131
 692 0122 07       		.uleb128 0x7
 693 0123 00000000 		.4byte	.LASF20
 694 0127 01       		.byte	0x1
 695 0128 32       		.byte	0x32
 696 0129 6B000000 		.4byte	0x6b
 697 012d 02       		.uleb128 0x2
 698 012e 91       		.byte	0x91
 699 012f 77       		.sleb128 -9
 700 0130 00       		.byte	0
 701 0131 06       		.uleb128 0x6
 702 0132 3C020000 		.4byte	.LASF21
 703 0136 01       		.byte	0x1
 704 0137 42       		.byte	0x42
 705 0138 81000000 		.4byte	0x81
 706 013c 00000000 		.4byte	.LFB37
 707 0140 58000000 		.4byte	.LFE37-.LFB37
 708 0144 01       		.uleb128 0x1
 709 0145 9C       		.byte	0x9c
 710 0146 67010000 		.4byte	0x167
 711 014a 07       		.uleb128 0x7
 712 014b 27020000 		.4byte	.LASF22
 713 014f 01       		.byte	0x1
 714 0150 42       		.byte	0x42
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 16


 715 0151 6B000000 		.4byte	0x6b
 716 0155 02       		.uleb128 0x2
 717 0156 91       		.byte	0x91
 718 0157 77       		.sleb128 -9
 719 0158 07       		.uleb128 0x7
 720 0159 07010000 		.4byte	.LASF23
 721 015d 01       		.byte	0x1
 722 015e 42       		.byte	0x42
 723 015f 6B000000 		.4byte	0x6b
 724 0163 02       		.uleb128 0x2
 725 0164 91       		.byte	0x91
 726 0165 76       		.sleb128 -10
 727 0166 00       		.byte	0
 728 0167 06       		.uleb128 0x6
 729 0168 06020000 		.4byte	.LASF24
 730 016c 01       		.byte	0x1
 731 016d 52       		.byte	0x52
 732 016e 81000000 		.4byte	0x81
 733 0172 00000000 		.4byte	.LFB38
 734 0176 46000000 		.4byte	.LFE38-.LFB38
 735 017a 01       		.uleb128 0x1
 736 017b 9C       		.byte	0x9c
 737 017c 9D010000 		.4byte	0x19d
 738 0180 07       		.uleb128 0x7
 739 0181 06000000 		.4byte	.LASF25
 740 0185 01       		.byte	0x1
 741 0186 52       		.byte	0x52
 742 0187 81000000 		.4byte	0x81
 743 018b 02       		.uleb128 0x2
 744 018c 91       		.byte	0x91
 745 018d 77       		.sleb128 -9
 746 018e 07       		.uleb128 0x7
 747 018f C9000000 		.4byte	.LASF26
 748 0193 01       		.byte	0x1
 749 0194 52       		.byte	0x52
 750 0195 6B000000 		.4byte	0x6b
 751 0199 02       		.uleb128 0x2
 752 019a 91       		.byte	0x91
 753 019b 76       		.sleb128 -10
 754 019c 00       		.byte	0
 755 019d 06       		.uleb128 0x6
 756 019e F5000000 		.4byte	.LASF27
 757 01a2 01       		.byte	0x1
 758 01a3 60       		.byte	0x60
 759 01a4 81000000 		.4byte	0x81
 760 01a8 00000000 		.4byte	.LFB39
 761 01ac 38000000 		.4byte	.LFE39-.LFB39
 762 01b0 01       		.uleb128 0x1
 763 01b1 9C       		.byte	0x9c
 764 01b2 C5010000 		.4byte	0x1c5
 765 01b6 07       		.uleb128 0x7
 766 01b7 D0010000 		.4byte	.LASF28
 767 01bb 01       		.byte	0x1
 768 01bc 60       		.byte	0x60
 769 01bd 81000000 		.4byte	0x81
 770 01c1 02       		.uleb128 0x2
 771 01c2 91       		.byte	0x91
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 17


 772 01c3 77       		.sleb128 -9
 773 01c4 00       		.byte	0
 774 01c5 06       		.uleb128 0x6
 775 01c6 48010000 		.4byte	.LASF29
 776 01ca 01       		.byte	0x1
 777 01cb 6E       		.byte	0x6e
 778 01cc 81000000 		.4byte	0x81
 779 01d0 00000000 		.4byte	.LFB40
 780 01d4 38000000 		.4byte	.LFE40-.LFB40
 781 01d8 01       		.uleb128 0x1
 782 01d9 9C       		.byte	0x9c
 783 01da ED010000 		.4byte	0x1ed
 784 01de 07       		.uleb128 0x7
 785 01df 19010000 		.4byte	.LASF30
 786 01e3 01       		.byte	0x1
 787 01e4 6E       		.byte	0x6e
 788 01e5 81000000 		.4byte	0x81
 789 01e9 02       		.uleb128 0x2
 790 01ea 91       		.byte	0x91
 791 01eb 77       		.sleb128 -9
 792 01ec 00       		.byte	0
 793 01ed 06       		.uleb128 0x6
 794 01ee 2D000000 		.4byte	.LASF31
 795 01f2 01       		.byte	0x1
 796 01f3 7C       		.byte	0x7c
 797 01f4 81000000 		.4byte	0x81
 798 01f8 00000000 		.4byte	.LFB41
 799 01fc 38000000 		.4byte	.LFE41-.LFB41
 800 0200 01       		.uleb128 0x1
 801 0201 9C       		.byte	0x9c
 802 0202 15020000 		.4byte	0x215
 803 0206 07       		.uleb128 0x7
 804 0207 12020000 		.4byte	.LASF32
 805 020b 01       		.byte	0x1
 806 020c 7C       		.byte	0x7c
 807 020d 81000000 		.4byte	0x81
 808 0211 02       		.uleb128 0x2
 809 0212 91       		.byte	0x91
 810 0213 77       		.sleb128 -9
 811 0214 00       		.byte	0
 812 0215 09       		.uleb128 0x9
 813 0216 0F010000 		.4byte	.LASF37
 814 021a 01       		.byte	0x1
 815 021b 8A       		.byte	0x8a
 816 021c 6B000000 		.4byte	0x6b
 817 0220 00000000 		.4byte	.LFB42
 818 0224 12000000 		.4byte	.LFE42-.LFB42
 819 0228 01       		.uleb128 0x1
 820 0229 9C       		.byte	0x9c
 821 022a 0A       		.uleb128 0xa
 822 022b DA010000 		.4byte	.LASF38
 823 022f 03       		.byte	0x3
 824 0230 12       		.byte	0x12
 825 0231 6B000000 		.4byte	0x6b
 826 0235 05       		.uleb128 0x5
 827 0236 03       		.byte	0x3
 828 0237 00000000 		.4byte	receivedCommand
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 18


 829 023b 00       		.byte	0
 830              		.section	.debug_abbrev,"",%progbits
 831              	.Ldebug_abbrev0:
 832 0000 01       		.uleb128 0x1
 833 0001 11       		.uleb128 0x11
 834 0002 01       		.byte	0x1
 835 0003 25       		.uleb128 0x25
 836 0004 0E       		.uleb128 0xe
 837 0005 13       		.uleb128 0x13
 838 0006 0B       		.uleb128 0xb
 839 0007 03       		.uleb128 0x3
 840 0008 0E       		.uleb128 0xe
 841 0009 1B       		.uleb128 0x1b
 842 000a 0E       		.uleb128 0xe
 843 000b 55       		.uleb128 0x55
 844 000c 17       		.uleb128 0x17
 845 000d 11       		.uleb128 0x11
 846 000e 01       		.uleb128 0x1
 847 000f 10       		.uleb128 0x10
 848 0010 17       		.uleb128 0x17
 849 0011 00       		.byte	0
 850 0012 00       		.byte	0
 851 0013 02       		.uleb128 0x2
 852 0014 24       		.uleb128 0x24
 853 0015 00       		.byte	0
 854 0016 0B       		.uleb128 0xb
 855 0017 0B       		.uleb128 0xb
 856 0018 3E       		.uleb128 0x3e
 857 0019 0B       		.uleb128 0xb
 858 001a 03       		.uleb128 0x3
 859 001b 0E       		.uleb128 0xe
 860 001c 00       		.byte	0
 861 001d 00       		.byte	0
 862 001e 03       		.uleb128 0x3
 863 001f 24       		.uleb128 0x24
 864 0020 00       		.byte	0
 865 0021 0B       		.uleb128 0xb
 866 0022 0B       		.uleb128 0xb
 867 0023 3E       		.uleb128 0x3e
 868 0024 0B       		.uleb128 0xb
 869 0025 03       		.uleb128 0x3
 870 0026 08       		.uleb128 0x8
 871 0027 00       		.byte	0
 872 0028 00       		.byte	0
 873 0029 04       		.uleb128 0x4
 874 002a 16       		.uleb128 0x16
 875 002b 00       		.byte	0
 876 002c 03       		.uleb128 0x3
 877 002d 0E       		.uleb128 0xe
 878 002e 3A       		.uleb128 0x3a
 879 002f 0B       		.uleb128 0xb
 880 0030 3B       		.uleb128 0x3b
 881 0031 0B       		.uleb128 0xb
 882 0032 49       		.uleb128 0x49
 883 0033 13       		.uleb128 0x13
 884 0034 00       		.byte	0
 885 0035 00       		.byte	0
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 19


 886 0036 05       		.uleb128 0x5
 887 0037 2E       		.uleb128 0x2e
 888 0038 00       		.byte	0
 889 0039 3F       		.uleb128 0x3f
 890 003a 19       		.uleb128 0x19
 891 003b 03       		.uleb128 0x3
 892 003c 0E       		.uleb128 0xe
 893 003d 3A       		.uleb128 0x3a
 894 003e 0B       		.uleb128 0xb
 895 003f 3B       		.uleb128 0x3b
 896 0040 0B       		.uleb128 0xb
 897 0041 27       		.uleb128 0x27
 898 0042 19       		.uleb128 0x19
 899 0043 11       		.uleb128 0x11
 900 0044 01       		.uleb128 0x1
 901 0045 12       		.uleb128 0x12
 902 0046 06       		.uleb128 0x6
 903 0047 40       		.uleb128 0x40
 904 0048 18       		.uleb128 0x18
 905 0049 9642     		.uleb128 0x2116
 906 004b 19       		.uleb128 0x19
 907 004c 00       		.byte	0
 908 004d 00       		.byte	0
 909 004e 06       		.uleb128 0x6
 910 004f 2E       		.uleb128 0x2e
 911 0050 01       		.byte	0x1
 912 0051 3F       		.uleb128 0x3f
 913 0052 19       		.uleb128 0x19
 914 0053 03       		.uleb128 0x3
 915 0054 0E       		.uleb128 0xe
 916 0055 3A       		.uleb128 0x3a
 917 0056 0B       		.uleb128 0xb
 918 0057 3B       		.uleb128 0x3b
 919 0058 0B       		.uleb128 0xb
 920 0059 27       		.uleb128 0x27
 921 005a 19       		.uleb128 0x19
 922 005b 49       		.uleb128 0x49
 923 005c 13       		.uleb128 0x13
 924 005d 11       		.uleb128 0x11
 925 005e 01       		.uleb128 0x1
 926 005f 12       		.uleb128 0x12
 927 0060 06       		.uleb128 0x6
 928 0061 40       		.uleb128 0x40
 929 0062 18       		.uleb128 0x18
 930 0063 9642     		.uleb128 0x2116
 931 0065 19       		.uleb128 0x19
 932 0066 01       		.uleb128 0x1
 933 0067 13       		.uleb128 0x13
 934 0068 00       		.byte	0
 935 0069 00       		.byte	0
 936 006a 07       		.uleb128 0x7
 937 006b 05       		.uleb128 0x5
 938 006c 00       		.byte	0
 939 006d 03       		.uleb128 0x3
 940 006e 0E       		.uleb128 0xe
 941 006f 3A       		.uleb128 0x3a
 942 0070 0B       		.uleb128 0xb
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 20


 943 0071 3B       		.uleb128 0x3b
 944 0072 0B       		.uleb128 0xb
 945 0073 49       		.uleb128 0x49
 946 0074 13       		.uleb128 0x13
 947 0075 02       		.uleb128 0x2
 948 0076 18       		.uleb128 0x18
 949 0077 00       		.byte	0
 950 0078 00       		.byte	0
 951 0079 08       		.uleb128 0x8
 952 007a 05       		.uleb128 0x5
 953 007b 00       		.byte	0
 954 007c 03       		.uleb128 0x3
 955 007d 08       		.uleb128 0x8
 956 007e 3A       		.uleb128 0x3a
 957 007f 0B       		.uleb128 0xb
 958 0080 3B       		.uleb128 0x3b
 959 0081 0B       		.uleb128 0xb
 960 0082 49       		.uleb128 0x49
 961 0083 13       		.uleb128 0x13
 962 0084 02       		.uleb128 0x2
 963 0085 18       		.uleb128 0x18
 964 0086 00       		.byte	0
 965 0087 00       		.byte	0
 966 0088 09       		.uleb128 0x9
 967 0089 2E       		.uleb128 0x2e
 968 008a 00       		.byte	0
 969 008b 3F       		.uleb128 0x3f
 970 008c 19       		.uleb128 0x19
 971 008d 03       		.uleb128 0x3
 972 008e 0E       		.uleb128 0xe
 973 008f 3A       		.uleb128 0x3a
 974 0090 0B       		.uleb128 0xb
 975 0091 3B       		.uleb128 0x3b
 976 0092 0B       		.uleb128 0xb
 977 0093 27       		.uleb128 0x27
 978 0094 19       		.uleb128 0x19
 979 0095 49       		.uleb128 0x49
 980 0096 13       		.uleb128 0x13
 981 0097 11       		.uleb128 0x11
 982 0098 01       		.uleb128 0x1
 983 0099 12       		.uleb128 0x12
 984 009a 06       		.uleb128 0x6
 985 009b 40       		.uleb128 0x40
 986 009c 18       		.uleb128 0x18
 987 009d 9642     		.uleb128 0x2116
 988 009f 19       		.uleb128 0x19
 989 00a0 00       		.byte	0
 990 00a1 00       		.byte	0
 991 00a2 0A       		.uleb128 0xa
 992 00a3 34       		.uleb128 0x34
 993 00a4 00       		.byte	0
 994 00a5 03       		.uleb128 0x3
 995 00a6 0E       		.uleb128 0xe
 996 00a7 3A       		.uleb128 0x3a
 997 00a8 0B       		.uleb128 0xb
 998 00a9 3B       		.uleb128 0x3b
 999 00aa 0B       		.uleb128 0xb
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 21


 1000 00ab 49       		.uleb128 0x49
 1001 00ac 13       		.uleb128 0x13
 1002 00ad 3F       		.uleb128 0x3f
 1003 00ae 19       		.uleb128 0x19
 1004 00af 02       		.uleb128 0x2
 1005 00b0 18       		.uleb128 0x18
 1006 00b1 00       		.byte	0
 1007 00b2 00       		.byte	0
 1008 00b3 00       		.byte	0
 1009              		.section	.debug_aranges,"",%progbits
 1010 0000 64000000 		.4byte	0x64
 1011 0004 0200     		.2byte	0x2
 1012 0006 00000000 		.4byte	.Ldebug_info0
 1013 000a 04       		.byte	0x4
 1014 000b 00       		.byte	0
 1015 000c 0000     		.2byte	0
 1016 000e 0000     		.2byte	0
 1017 0010 00000000 		.4byte	.LFB33
 1018 0014 0C000000 		.4byte	.LFE33-.LFB33
 1019 0018 00000000 		.4byte	.LFB34
 1020 001c 48000000 		.4byte	.LFE34-.LFB34
 1021 0020 00000000 		.4byte	.LFB35
 1022 0024 48000000 		.4byte	.LFE35-.LFB35
 1023 0028 00000000 		.4byte	.LFB36
 1024 002c 48000000 		.4byte	.LFE36-.LFB36
 1025 0030 00000000 		.4byte	.LFB37
 1026 0034 58000000 		.4byte	.LFE37-.LFB37
 1027 0038 00000000 		.4byte	.LFB38
 1028 003c 46000000 		.4byte	.LFE38-.LFB38
 1029 0040 00000000 		.4byte	.LFB39
 1030 0044 38000000 		.4byte	.LFE39-.LFB39
 1031 0048 00000000 		.4byte	.LFB40
 1032 004c 38000000 		.4byte	.LFE40-.LFB40
 1033 0050 00000000 		.4byte	.LFB41
 1034 0054 38000000 		.4byte	.LFE41-.LFB41
 1035 0058 00000000 		.4byte	.LFB42
 1036 005c 12000000 		.4byte	.LFE42-.LFB42
 1037 0060 00000000 		.4byte	0
 1038 0064 00000000 		.4byte	0
 1039              		.section	.debug_ranges,"",%progbits
 1040              	.Ldebug_ranges0:
 1041 0000 00000000 		.4byte	.LFB33
 1042 0004 0C000000 		.4byte	.LFE33
 1043 0008 00000000 		.4byte	.LFB34
 1044 000c 48000000 		.4byte	.LFE34
 1045 0010 00000000 		.4byte	.LFB35
 1046 0014 48000000 		.4byte	.LFE35
 1047 0018 00000000 		.4byte	.LFB36
 1048 001c 48000000 		.4byte	.LFE36
 1049 0020 00000000 		.4byte	.LFB37
 1050 0024 58000000 		.4byte	.LFE37
 1051 0028 00000000 		.4byte	.LFB38
 1052 002c 46000000 		.4byte	.LFE38
 1053 0030 00000000 		.4byte	.LFB39
 1054 0034 38000000 		.4byte	.LFE39
 1055 0038 00000000 		.4byte	.LFB40
 1056 003c 38000000 		.4byte	.LFE40
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 22


 1057 0040 00000000 		.4byte	.LFB41
 1058 0044 38000000 		.4byte	.LFE41
 1059 0048 00000000 		.4byte	.LFB42
 1060 004c 12000000 		.4byte	.LFE42
 1061 0050 00000000 		.4byte	0
 1062 0054 00000000 		.4byte	0
 1063              		.section	.debug_line,"",%progbits
 1064              	.Ldebug_line0:
 1065 0000 5C010000 		.section	.debug_str,"MS",%progbits,1
 1065      02005D00 
 1065      00000201 
 1065      FB0E0D00 
 1065      01010101 
 1066              	.LASF20:
 1067 0000 6C696768 		.ascii	"light\000"
 1067      7400
 1068              	.LASF25:
 1069 0006 68656174 		.ascii	"heatStatus\000"
 1069      53746174 
 1069      757300
 1070              	.LASF4:
 1071 0011 6C6F6E67 		.ascii	"long int\000"
 1071      20696E74 
 1071      00
 1072              	.LASF3:
 1073 001a 73686F72 		.ascii	"short unsigned int\000"
 1073      7420756E 
 1073      7369676E 
 1073      65642069 
 1073      6E7400
 1074              	.LASF31:
 1075 002d 72657370 		.ascii	"respondIrri\000"
 1075      6F6E6449 
 1075      72726900 
 1076              	.LASF12:
 1077 0039 666C6F61 		.ascii	"float\000"
 1077      7400
 1078              	.LASF33:
 1079 003f 474E5520 		.ascii	"GNU C 4.8.4 20140526 (release) [ARM/embedded-4_8-br"
 1079      4320342E 
 1079      382E3420 
 1079      32303134 
 1079      30353236 
 1080 0072 616E6368 		.ascii	"anch revision 211358] -mcpu=cortex-m0 -mthumb -g -O"
 1080      20726576 
 1080      6973696F 
 1080      6E203231 
 1080      31333538 
 1081 00a5 30202D66 		.ascii	"0 -ffunction-sections\000"
 1081      66756E63 
 1081      74696F6E 
 1081      2D736563 
 1081      74696F6E 
 1082              	.LASF1:
 1083 00bb 756E7369 		.ascii	"unsigned char\000"
 1083      676E6564 
 1083      20636861 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 23


 1083      7200
 1084              	.LASF26:
 1085 00c9 6F6E4F66 		.ascii	"onOff\000"
 1085      6600
 1086              	.LASF36:
 1087 00cf 696E6974 		.ascii	"initUART\000"
 1087      55415254 
 1087      00
 1088              	.LASF5:
 1089 00d8 6C6F6E67 		.ascii	"long unsigned int\000"
 1089      20756E73 
 1089      69676E65 
 1089      6420696E 
 1089      7400
 1090              	.LASF18:
 1091 00ea 74656D70 		.ascii	"temp\000"
 1091      00
 1092              	.LASF9:
 1093 00ef 75696E74 		.ascii	"uint8\000"
 1093      3800
 1094              	.LASF27:
 1095 00f5 72657370 		.ascii	"respondWin\000"
 1095      6F6E6457 
 1095      696E00
 1096              	.LASF13:
 1097 0100 646F7562 		.ascii	"double\000"
 1097      6C6500
 1098              	.LASF23:
 1099 0107 736F696C 		.ascii	"soilHum\000"
 1099      48756D00 
 1100              	.LASF37:
 1101 010f 646B5265 		.ascii	"dkRequest\000"
 1101      71756573 
 1101      7400
 1102              	.LASF30:
 1103 0119 76656E74 		.ascii	"ventStatus\000"
 1103      53746174 
 1103      757300
 1104              	.LASF11:
 1105 0124 696E7438 		.ascii	"int8\000"
 1105      00
 1106              	.LASF10:
 1107 0129 75696E74 		.ascii	"uint32\000"
 1107      333200
 1108              	.LASF8:
 1109 0130 756E7369 		.ascii	"unsigned int\000"
 1109      676E6564 
 1109      20696E74 
 1109      00
 1110              	.LASF17:
 1111 013d 72657370 		.ascii	"respondHum\000"
 1111      6F6E6448 
 1111      756D00
 1112              	.LASF29:
 1113 0148 72657370 		.ascii	"respondVent\000"
 1113      6F6E6456 
 1113      656E7400 
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 24


 1114              	.LASF7:
 1115 0154 6C6F6E67 		.ascii	"long long unsigned int\000"
 1115      206C6F6E 
 1115      6720756E 
 1115      7369676E 
 1115      65642069 
 1116              	.LASF16:
 1117 016b 72657370 		.ascii	"respondTemp\000"
 1117      6F6E6454 
 1117      656D7000 
 1118              	.LASF19:
 1119 0177 72657370 		.ascii	"respondLight\000"
 1119      6F6E644C 
 1119      69676874 
 1119      00
 1120              	.LASF35:
 1121 0184 433A5C55 		.ascii	"C:\\Users\\Snufkin\\Documents\\GitHub\\PSoC_Master\\"
 1121      73657273 
 1121      5C536E75 
 1121      666B696E 
 1121      5C446F63 
 1122 01b2 50536F43 		.ascii	"PSoC_Master\\PSoC_Master.cydsn\000"
 1122      5F4D6173 
 1122      7465725C 
 1122      50536F43 
 1122      5F4D6173 
 1123              	.LASF28:
 1124 01d0 77696E53 		.ascii	"winStatus\000"
 1124      74617475 
 1124      7300
 1125              	.LASF38:
 1126 01da 72656365 		.ascii	"receivedCommand\000"
 1126      69766564 
 1126      436F6D6D 
 1126      616E6400 
 1127              	.LASF15:
 1128 01ea 73697A65 		.ascii	"sizetype\000"
 1128      74797065 
 1128      00
 1129              	.LASF6:
 1130 01f3 6C6F6E67 		.ascii	"long long int\000"
 1130      206C6F6E 
 1130      6720696E 
 1130      7400
 1131              	.LASF14:
 1132 0201 63686172 		.ascii	"char\000"
 1132      00
 1133              	.LASF24:
 1134 0206 72657370 		.ascii	"respondHeat\000"
 1134      6F6E6448 
 1134      65617400 
 1135              	.LASF32:
 1136 0212 69727269 		.ascii	"irriStatus\000"
 1136      53746174 
 1136      757300
 1137              	.LASF2:
 1138 021d 73686F72 		.ascii	"short int\000"
ARM GAS  C:\Users\Snufkin\AppData\Local\Temp\ccWjp3zV.s 			page 25


 1138      7420696E 
 1138      7400
 1139              	.LASF22:
 1140 0227 696E6465 		.ascii	"index\000"
 1140      7800
 1141              	.LASF34:
 1142 022d 2E5C5541 		.ascii	".\\UART_Class.c\000"
 1142      52545F43 
 1142      6C617373 
 1142      2E6300
 1143              	.LASF21:
 1144 023c 72657370 		.ascii	"respondSoilHum\000"
 1144      6F6E6453 
 1144      6F696C48 
 1144      756D00
 1145              	.LASF0:
 1146 024b 7369676E 		.ascii	"signed char\000"
 1146      65642063 
 1146      68617200 
 1147              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.8.4 20140526 (release) [ARM/embedded-4_8-br
